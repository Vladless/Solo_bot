import logging
from datetime import datetime
from typing import Optional, Dict, Any, List, Union

from aiogram import Bot

logger = logging.getLogger(__name__)


async def send_admin_notification(
    bot: Bot,
    title: str,
    message: str,
    user_data: Optional[Dict[str, Any]] = None,
    admin_ids: Optional[List[Union[int, str]]] = None
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """
    try:
        from config import ADMIN_ID as ADMIN_IDS, NOTIFY_NEW_USERS, NOTIFY_PAYMENTS, NOTIFY_ERRORS, ADMIN_CHAT_ID
        
        # Use provided admin_ids or fall back to config
        admin_ids_to_notify = admin_ids if admin_ids is not None else (ADMIN_IDS if isinstance(ADMIN_IDS, list) else [ADMIN_IDS])
        
        logger.info(f"[NOTIFICATION] Preparing to send notification. Title: {title}")
        logger.info(f"[NOTIFICATION] Admin IDs from config: {admin_ids_to_notify}")
        logger.info(f"[NOTIFICATION] Admin chat ID: {ADMIN_CHAT_ID}")
        logger.info(f"[NOTIFICATION] Notification settings - New users: {NOTIFY_NEW_USERS}, Payments: {NOTIFY_PAYMENTS}, Errors: {NOTIFY_ERRORS}")
        logger.info(f"[NOTIFICATION] User data: {user_data}")
        
        if not admin_ids_to_notify or (isinstance(admin_ids_to_notify, list) and not any(admin_ids_to_notify)):
            logger.error("[NOTIFICATION] No admin IDs found in config or empty list provided")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not bot or not hasattr(bot, 'send_message'):
            logger.error("[NOTIFICATION] Bot instance is not properly initialized")
            return
            
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –≤—ã—Ö–æ–¥–∏–º
        if ("–û—à–∏–±–∫–∞" in title and not NOTIFY_ERRORS):
            logger.warning(f"[NOTIFICATION] Notification '{title}' is disabled in config")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        logger.info(f"[NOTIFICATION] Forming notification text")
        text = f"{title}\n\n"
        
        if user_data:
            user_info = []
            for key, value in user_data.items():
                if value is not None:
                    if key == "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º ID –∫–∞–∫ –∫–æ–¥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                        user_info.append(f"<b>{key}:</b> <code>{str(value)}</code>")
                    else:
                        user_info.append(f"<b>{key}:</b> {str(value)}")
            if user_info:
                text += "\n".join(user_info)
                logger.info(f"[NOTIFICATION] User info: {user_info}")
            
        logger.info(f"[NOTIFICATION] Final notification text: {text[:100]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in admin_ids_to_notify:
            try:
                if not admin_id:
                    logger.warning(f"[NOTIFICATION] Skipping empty admin ID in admin_ids_to_notify")
                    continue
                    
                logger.info(f"[NOTIFICATION] Sending to admin {admin_id}: {text[:100]}...")
                await bot.send_message(
                    chat_id=admin_id,
                    text=text,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                logger.info(f"[NOTIFICATION] Successfully sent to admin {admin_id}")
            except Exception as e:
                error_msg = str(e).lower()
                if "chat not found" in error_msg:
                    logger.error(f"[NOTIFICATION] Chat not found for admin ID: {admin_id}")
                else:
                    logger.error(f"[NOTIFICATION] Failed to send to admin {admin_id}: {error_msg}", exc_info=True)
                    
        logger.info(f"[NOTIFICATION] Completed sending notification to all admins")
        
    except Exception as e:
        logger.error(f"[NOTIFICATION] Critical error in send_admin_notification: {str(e)}", exc_info=True)


async def send_notification(
    bot: Bot,
    user_id: int,
    username: str,
    notification_type: str,
    title: str,
    user_data: Dict[str, Any],
    admin_ids: Optional[List[Union[int, str]]] = None
) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ("new_user", "payment", "subscription", "error")
    :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    :param user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    :param admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        from config import NOTIFY_NEW_USERS, NOTIFY_NEW_SUBSCRIPTIONS, NOTIFY_PAYMENTS, NOTIFY_ERRORS
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        if notification_type == "new_user" and not NOTIFY_NEW_USERS:
            return
        elif notification_type == "payment" and not NOTIFY_PAYMENTS:
            return
        elif notification_type == "subscription" and not NOTIFY_NEW_SUBSCRIPTIONS:
            return
        elif notification_type == "error" and not NOTIFY_ERRORS:
            return
            
        if not bot or not hasattr(bot, 'send_message'):
            logger.error("[NOTIFICATION] Bot instance is not properly initialized")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        full_title = title
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫
        if notification_type == "error":
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            full_title = f"‚ö†Ô∏è {full_title} [{current_time}]"
        
        logger.info(f"[NOTIFICATION] Preparing to send {notification_type} notification for user {user_id}")
        logger.info(f"[NOTIFICATION] Title: {full_title}")
        logger.info(f"[NOTIFICATION] User data: {user_data}")
        logger.info(f"[NOTIFICATION] Admin IDs: {admin_ids}")
        
        await send_admin_notification(
            bot=bot,
            title=full_title,
            message="",
            user_data=user_data,
            admin_ids=admin_ids
        )
        
        logger.info(f"[NOTIFICATION] Successfully sent {notification_type} notification for user {user_id}")
    except Exception as e:
        logger.error(f"[NOTIFICATION] Error in send_notification: {str(e)}", exc_info=True)


async def notify_new_user(
    bot: Bot,
    user_id: int,
    username: str,
    full_name: str,
    referrer_id: Optional[int] = None,
    admin_ids: Optional[List[Union[int, str]]] = None
) -> None:
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param referrer_id: ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    :param admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        title = "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_data = {
            "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": user_id,
            "–ò–º—è": full_name,
            "Username": f"@{username}" if username else "–ù–µ —É–∫–∞–∑–∞–Ω",
            "–†–µ—Ñ–µ—Ä–µ—Ä": f"ID: {referrer_id}" if referrer_id else "–ù–µ—Ç"
        }
        
        await send_notification(
            bot=bot,
            user_id=user_id,
            username=username,
            notification_type="new_user",
            title=title,
            user_data=user_data,
            admin_ids=admin_ids
        )
    except Exception as e:
        logger.error(f"[NOTIFICATION] Error in notify_new_user: {str(e)}", exc_info=True)


async def notify_payment(
    bot: Bot,
    user_id: int,
    username: str,
    amount: float,
    tariff_name: str,
    payment_method: str,
    payment_id: str,
    admin_ids: Optional[List[Union[int, str]]] = None
) -> None:
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param amount: –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã
    :param tariff_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
    :param payment_method: –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
    :param payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
    :param admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        title = f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"
        user_data = {
            "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": user_id,
            "Username": f"@{username}" if username else "–ù–µ —É–∫–∞–∑–∞–Ω",
            "–°—É–º–º–∞": f"{amount} —Ä—É–±.",
            "–¢–∞—Ä–∏—Ñ": tariff_name,
            "–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã": payment_method,
            "ID –ø–ª–∞—Ç–µ–∂–∞": payment_id
        }
        
        await send_notification(
            bot=bot,
            user_id=user_id,
            username=username,
            notification_type="payment",
            title=title,
            user_data=user_data,
            admin_ids=admin_ids
        )
    except Exception as e:
        logger.error(f"[NOTIFICATION] Error in notify_payment: {str(e)}", exc_info=True)


async def notify_subscription(
    bot: Bot,
    user_id: int,
    username: str,
    subscription_type: str,
    duration_days: int,
    amount: Optional[float] = None,  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    tariff_name: str = None,
    is_trial: bool = False,
    is_renewal: bool = False,
    user_data: Optional[Dict[str, Any]] = None,
    admin_ids: Optional[List[Union[int, str]]] = None
) -> None:
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
    
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param subscription_type: –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Trial", "Standart", "VIP")
    :param duration_days: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö
    :param tariff_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param is_trial: –§–ª–∞–≥ —Ç—Ä–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    :param is_renewal: –§–ª–∞–≥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    :param admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    """
    try:
        from config import NOTIFY_NEW_SUBSCRIPTIONS, NOTIFY_NEW_USERS, ADMIN_CHAT_ID
        
        if not NOTIFY_NEW_SUBSCRIPTIONS and not is_trial:
            logger.info(f"[NOTIFICATION] Subscription notifications are disabled in config")
            return
            
        if not bot or not hasattr(bot, 'send_message'):
            logger.error("[NOTIFICATION] Bot instance is not properly initialized for subscription notification")
            return
            
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        def escape_markdown(text: str) -> str:
            if not text:
                return ""
            escape_chars = "_*[]()~`>#+-=|{}.!"
            return ''.join(f'\\{char}' if char in escape_chars else char for char in str(text))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if is_trial:
            title = f"–¢—Ä–∏–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            if tariff_name and tariff_name != subscription_type:
                title += f" ({tariff_name})"
        else:
            if is_renewal:
                title = f"–ü—Ä–æ–¥–ª–µ–Ω–æ {subscription_type}"
            else:
                title = f"–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ {subscription_type}"
            if tariff_name and tariff_name != subscription_type:
                title += f" ({tariff_name})"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": user_id,
            "–Æ–∑–µ—Ä–Ω–µ–π–º": f"@{username}" if username else "–ù–µ —É–∫–∞–∑–∞–Ω",
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è": f"{duration_days} –¥–Ω–µ–π",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": f"{amount} —Ä—É–±." if amount is not None else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
        }
        
        await send_notification(
            bot=bot,
            user_id=user_id,
            username=username,
            notification_type="subscription",
            title=title,
            user_data=user_data,
            admin_ids=admin_ids
        )
    except Exception as e:
        logger.error(f"[NOTIFICATION] Error in notify_subscription: {str(e)}", exc_info=True)


async def send_admin_message(
    bot: Bot,
    message: str,
    title: str = "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
    admin_ids: Optional[List[Union[int, str]]] = None,
    send_to_group: bool = True
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    :param message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    :param admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    :param send_to_group: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
    """
    from config import ADMIN_ID, ADMIN_CHAT_ID
    
    try:
        # Use provided admin_ids or fall back to config
        target_admin_ids = admin_ids if admin_ids is not None else (ADMIN_ID if isinstance(ADMIN_ID, list) else [ADMIN_ID])
        
        if not target_admin_ids and not (send_to_group and ADMIN_CHAT_ID):
            logger.warning("No admin IDs or group chat ID specified for admin message")
            return
        
        # Send to individual admins
        if target_admin_ids:
            await send_admin_notification(
                bot=bot,
                title=title,
                message=message,
                admin_ids=target_admin_ids
            )
            
        # Send to admin group if enabled and chat ID is set
        if send_to_group and ADMIN_CHAT_ID:
            try:
                await bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=f"*{title}*\n\n{message}",
                    parse_mode="MarkdownV2",
                    disable_web_page_preview=True
                )
                logger.info(f"[ADMIN MESSAGE] Sent to admin group {ADMIN_CHAT_ID}")
            except Exception as e:
                logger.error(f"[ADMIN MESSAGE] Error sending to admin group: {e}", exc_info=True)
                
    except Exception as e:
        logger.error(f"[ADMIN MESSAGE] Error in send_admin_message: {e}", exc_info=True)


async def notify_error(
    bot: Bot,
    error: Exception,
    context: Optional[Dict[str, Any]] = None,
    admin_ids: Optional[List[Union[int, str]]] = None
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    :param error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
    :param context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–± –æ—à–∏–±–∫–µ
    :param admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    """
    from config import NOTIFY_ERRORS, ADMIN_ID, NOTIFY_NEW_SUBSCRIPTIONS, ADMIN_CHAT_ID
    
    if not NOTIFY_ERRORS:
        logger.warning("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return
    
    # Use provided admin_ids or fall back to config
    admin_ids = admin_ids if admin_ids is not None else (ADMIN_ID if isinstance(ADMIN_ID, list) else [ADMIN_ID])
        
    if not admin_ids:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
        return
    
    try:
        # Format error information
        error_type = error.__class__.__name__
        error_message = str(error) or "–ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"
        
        # Get traceback
        import traceback
        tb_list = traceback.format_exception(type(error), error, error.__traceback__)
        tb_text = ''.join(tb_list[-3:])  # Get last 3 lines of traceback
        
        # Add context information if available
        context_info = ""
        if context:
            context_info = "\n\nüìã *–ö–æ–Ω—Ç–µ–∫—Å—Ç:*\n"
            for key, value in (context.items() if hasattr(context, 'items') else []):
                context_info += f"‚Ä¢ *{key}:* `{str(value)[:100]}`\n"
        
        # Format the full message with MarkdownV2 escaping
        def escape_markdown(text: str) -> str:
            if not text:
                return ""
            escape_chars = r'_*[]()~`>#+-=|{}.!'
            return ''.join(f'\\{char}' if char in escape_chars else char for char in str(text))
        
        # Format the error message with proper escaping
        error_type_escaped = escape_markdown(error_type)
        error_message_escaped = escape_markdown(error_message)
        tb_text_escaped = escape_markdown(tb_text)
        
        message = (
            f"‚ùå *–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ*\n\n"
            f"*–¢–∏–ø:* `{error_type_escaped}`\n"
            f"*–°–æ–æ–±—â–µ–Ω–∏–µ:* `{error_message_escaped}`\n\n"
            f"*–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:*\n```\n{tb_text_escaped}\n```"
            f"{context_info}"
        )
        
        # Send notification to all admins
        for admin_id in admin_ids:
            try:
                logger.info(f"Sending error notification to admin {admin_id}")
                await bot.send_message(
                    chat_id=admin_id,
                    text=message,
                    parse_mode="MarkdownV2",
                    disable_web_page_preview=True
                )
                logger.info(f"Error notification sent to admin {admin_id}")
            except Exception as e:
                logger.error(f"Failed to send error notification to admin {admin_id}: {e}")
    except Exception as e:
        logger.critical(f"Critical error while sending error notification: {e}", exc_info=True)
