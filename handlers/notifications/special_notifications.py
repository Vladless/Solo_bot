import asyncio
from datetime import datetime, timedelta

import asyncpg
import pytz
from aiogram import Bot, Router, types
from aiogram.exceptions import TelegramForbiddenError
from aiogram.utils.keyboard import InlineKeyboardBuilder
from html import escape

from config import (
    NOTIFY_EXTRA_DAYS,
    NOTIFY_INACTIVE,
    NOTIFY_INACTIVE_TRAFFIC,
    SUPPORT_CHAT_URL,
    TRIAL_TIME
)
from database import (
    add_notification,
    check_notifications_bulk,
    create_blocked_user,
)
from handlers.buttons import MAIN_MENU
from handlers.keys.key_utils import get_user_traffic
from handlers.texts import (
    TRIAL_INACTIVE_BONUS_MSG,
    TRIAL_INACTIVE_FIRST_MSG,
    ZERO_TRAFFIC_MSG
)
from handlers.utils import format_days
from logger import logger
from .notify_utils import send_messages_with_limit, send_notification


router = Router()
moscow_tz = pytz.timezone("Europe/Moscow")


async def notify_inactive_trial_users(bot: Bot, conn: asyncpg.Connection):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–∏—Ö –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ.
    –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞ –∏ —Ç—Ä–∏–∞–ª –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –±–æ–Ω—É—Å–æ–º +2 –¥–Ω—è.
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–∏—Ö –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥...")

    users = await check_notifications_bulk("inactive_trial", NOTIFY_INACTIVE, conn)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

    messages = []

    for user in users:
        tg_id = user["tg_id"]
        username = user["username"]
        first_name = user["first_name"]
        last_name = user["last_name"]
        display_name = escape(username or first_name or last_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(
                text="üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
                callback_data="create_key",
            )
        )
        builder.row(types.InlineKeyboardButton(text=MAIN_MENU, callback_data="profile"))
        keyboard = builder.as_markup()

        trial_extended = user["last_notification_time"] is not None

        if trial_extended:
            total_days = NOTIFY_EXTRA_DAYS + TRIAL_TIME
            message = TRIAL_INACTIVE_BONUS_MSG.format(
                display_name=display_name,
                extra_days_formatted=format_days(NOTIFY_EXTRA_DAYS),
                total_days_formatted=format_days(total_days),
            )
            await conn.execute("UPDATE users SET trial = -1 WHERE tg_id = $1", tg_id)
        else:
            message = TRIAL_INACTIVE_FIRST_MSG.format(
                display_name=display_name, trial_time_formatted=format_days(TRIAL_TIME)
            )

        messages.append({
            "tg_id": tg_id,
            "text": message,
            "keyboard": keyboard,
        })
        await add_notification(tg_id, "inactive_trial", session=conn)

    if messages:
        await send_messages_with_limit(
            bot,
            messages,
            conn=conn,
            source_file="special_notifications"
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(messages)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

    logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def notify_users_no_traffic(bot: Bot, conn: asyncpg.Connection, current_time: int, keys: list):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω—É–ª–µ–≤–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ.
    –ï—Å–ª–∏ —Ç—Ä–∞—Ñ–∏–∫ 0 –ì–ë –∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,
    –Ω–æ –∏—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–¥–ª–∏–ª–∞—Å—å.
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–ª–µ–≤—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º...")

    current_dt = datetime.fromtimestamp(current_time / 1000, tz=moscow_tz)

    for key in keys:
        tg_id = key.get("tg_id")
        email = key.get("email")
        created_at = key.get("created_at")
        client_id = key.get("client_id")
        expiry_time = key.get("expiry_time")
        notified = key.get("notified")

        if created_at is None:
            logger.warning(f"–î–ª—è {email} –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è created_at. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        if notified is True:
            continue

        created_at_dt = pytz.utc.localize(datetime.fromtimestamp(created_at / 1000)).astimezone(moscow_tz)
        created_at_plus_2 = created_at_dt + timedelta(hours=NOTIFY_INACTIVE_TRAFFIC)

        if expiry_time:
            expiry_dt = pytz.utc.localize(datetime.fromtimestamp(expiry_time / 1000)).astimezone(moscow_tz)
            renewal_threshold = expiry_dt - timedelta(days=30)
            renewal_recent = current_dt - renewal_threshold < timedelta(hours=NOTIFY_INACTIVE_TRAFFIC)

            if renewal_recent:
                continue

        if current_dt < created_at_plus_2:
            continue

        try:
            traffic_data = await get_user_traffic(conn, tg_id, email)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {email}: {e}")
            continue

        if traffic_data.get("status") != "success":
            logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {email}: {traffic_data.get('message')}")
            continue

        total_traffic = sum(
            value if isinstance(value, int | float) else 0 for value in traffic_data.get("traffic", {}).values()
        )
        logger.info(f"–ö–ª—é—á –¥–ª—è {email}: –æ–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {total_traffic} –ì–ë")

        if total_traffic == 0:
            logger.info(f"‚ö† –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} ({email}) 0 –ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")

            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="üîß –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=SUPPORT_CHAT_URL))
            builder.row(types.InlineKeyboardButton(text=MAIN_MENU, callback_data="profile"))
            keyboard = builder.as_markup()

            message = ZERO_TRAFFIC_MSG.format(email=email)

            try:
                result = await send_notification(bot, tg_id, None, message, keyboard)
                await conn.execute(
                    "UPDATE keys SET notified = TRUE WHERE tg_id = $1 AND client_id = $2", tg_id, client_id
                )
                if result:
                    logger.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id} –æ –Ω—É–ª–µ–≤–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ.")
                else:
                    logger.warning(f"üì© –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id} –æ –Ω—É–ª–µ–≤–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ.")
            except TelegramForbiddenError:
                logger.warning(f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {tg_id}.")
                await create_blocked_user(tg_id, conn)
            except Exception as e:
                logger.error(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
        else:
            try:
                await conn.execute(
                    "UPDATE keys SET notified = TRUE WHERE tg_id = $1 AND client_id = $2", tg_id, client_id
                )
                logger.info(f"–ö–ª—é—á –¥–ª—è {email} –∏–º–µ–µ—Ç —Ç—Ä–∞—Ñ–∏–∫. –û–±–Ω–æ–≤–ª–µ–Ω–æ notified = TRUE.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è notified –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e}")

    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–ª–µ–≤—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
