import asyncio
import os
from datetime import datetime, timedelta

import aiofiles
import asyncpg
import pytz
from aiogram import Bot, Router, types
from aiogram.exceptions import TelegramForbiddenError
from aiogram.types import BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from py3xui import AsyncApi

from config import (
    ADMIN_PASSWORD,
    ADMIN_USERNAME,
    AUTO_DELETE_EXPIRED_KEYS,
    AUTO_RENEW_KEYS,
    DATABASE_URL,
    DELETE_KEYS_DELAY,
    DEV_MODE,
    EXPIRED_KEYS_CHECK_INTERVAL,
    RENEWAL_PLANS,
    SUPPORT_CHAT_URL,
    TOTAL_GB,
    TRIAL_TIME,
)
from database import (
    add_notification,
    check_notification_time,
    create_blocked_user,
    delete_key,
    get_balance,
    get_servers,
    update_balance,
    update_key_expiry,
)
from handlers.buttons.profile import ADD_SUB
from handlers.keys.key_utils import delete_key_from_cluster, renew_key_in_cluster
from handlers.texts import KEY_EXPIRY_10H, KEY_EXPIRY_24H, KEY_RENEWED
from logger import logger

router = Router()


async def periodic_expired_keys_check(bot: Bot):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º."""
    while True:
        conn = None
        try:
            conn = await asyncpg.connect(DATABASE_URL)
            current_time = int(datetime.utcnow().timestamp() * 1000)
            await handle_expired_keys(bot, conn, current_time)
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ periodic_expired_keys_check: {e}")
        finally:
            if conn:
                await conn.close()

        await asyncio.sleep(EXPIRED_KEYS_CHECK_INTERVAL)


async def notify_expiring_keys(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (—Ä–∞–∑ –≤ —á–∞—Å –∏–ª–∏ —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å —Å—Ç–æ–∏—Ç)
    –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ 24—á, 10—á, –∞ —Ç–∞–∫–∂–µ –¥–ª—è ¬´–ø—Ä–æ–±–Ω—ã—Ö¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
    –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–ª—é—á.
    """
    conn = None
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ.")

        current_time = int(datetime.utcnow().timestamp() * 1000)
        threshold_time_10h = int((datetime.utcnow() + timedelta(hours=10)).timestamp() * 1000)
        threshold_time_24h = int((datetime.utcnow() + timedelta(days=1)).timestamp() * 1000)

        logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

        await notify_inactive_trial_users(bot, conn)
        await asyncio.sleep(0.5)
        await notify_10h_keys(bot, conn, current_time, threshold_time_10h)
        await asyncio.sleep(0.5)
        await notify_24h_keys(bot, conn, current_time, threshold_time_24h)
        await asyncio.sleep(0.5)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    finally:
        if conn:
            await conn.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")


async def notify_10h_keys(bot: Bot, conn: asyncpg.Connection, current_time: float, threshold_time_10h: float):
    """
    –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–æ–∫ <= threshold_time_10h (—Ç–æ –µ—Å—Ç—å –º–µ–Ω—å—à–µ 10 —á–∞—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å),
    –Ω–æ > current_time (–µ—â—ë –Ω–µ –∏—Å—Ç–µ–∫–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é),
    –∏ –ø—Ä–∏ —ç—Ç–æ–º notified = FALSE (–µ—â—ë –Ω–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏—Å—å –∑–∞ 10—á).
    """
    records = await conn.fetch(
        """
        SELECT tg_id, email, expiry_time, client_id, server_id 
        FROM keys 
        WHERE expiry_time <= $1 
          AND expiry_time > $2 
          AND notified = FALSE
        """,
        threshold_time_10h,
        current_time,
    )

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(records)} –∫–ª—é—á–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 10 —á–∞—Å–æ–≤.")

    for record in records:
        await process_10h_record(record, bot, conn)

    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ 10 —á–∞—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def process_10h_record(record, bot, conn):
    """
    –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å ~10—á.
    –ï—Å–ª–∏ AUTO_RENEW_KEYS –≤–∫–ª—é—á—ë–Ω –∏ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äî –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    tg_id = record["tg_id"]
    email = record["email"]
    expiry_time = record["expiry_time"]
    client_id = record["client_id"]

    moscow_tz = pytz.timezone("Europe/Moscow")
    expiry_date = datetime.fromtimestamp(expiry_time / 1000, tz=moscow_tz)
    current_date = datetime.now(moscow_tz)
    time_left = expiry_date - current_date

    # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å —á–∞—Å–æ–≤ –∏–ª–∏ –¥–Ω–µ–π
    if time_left.total_seconds() <= 0:
        days_left_message = "–ö–ª—é—á –∏—Å—Ç–µ–∫"
    else:
        days_left_message = f"{time_left.days}" if time_left.days > 0 else f"{time_left.seconds // 3600}"

    message = KEY_EXPIRY_10H.format(
        email=email,
        expiry_date=expiry_date.strftime("%Y-%m-%d %H:%M:%S"),
        days_left_message=days_left_message,
        price=RENEWAL_PLANS["1"]["price"],
    )

    balance = await get_balance(tg_id)

    if AUTO_RENEW_KEYS and balance >= RENEWAL_PLANS["1"]["price"]:
        try:
            # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º
            await update_balance(tg_id, -RENEWAL_PLANS["1"]["price"], conn)
            new_expiry_time = int((datetime.utcnow() + timedelta(days=30)).timestamp() * 1000)

            # –û–±–Ω–æ–≤–ª—è–µ–º expiry –≤ –ë–î
            await update_key_expiry(client_id, new_expiry_time, conn)

            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö
            servers = await get_servers(conn)
            for cluster_id in servers:
                await renew_key_in_cluster(cluster_id, email, client_id, new_expiry_time, TOTAL_GB)
                logger.info(f"–ö–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_id}.")

            # –ü–æ—Å–ª–µ –£–°–ü–ï–®–ù–û–ì–û –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±–∞ —Ñ–ª–∞–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π,
            # —á—Ç–æ–±—ã —á–µ—Ä–µ–∑ ~24—á –∏ 10—á –¥–æ –ù–û–í–û–ì–û –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.
            await conn.execute(
                """
                UPDATE keys
                   SET notified = FALSE,
                       notified_24h = FALSE,
                       expiry_time = $2
                 WHERE client_id = $1
            """,
                client_id,
                new_expiry_time,
            )

            # –®–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
            image_path = os.path.join("img", "notify_10h.jpg")
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]]
            )

            if os.path.isfile(image_path):
                async with aiofiles.open(image_path, "rb") as image_file:
                    image_data = await image_file.read()
                    await bot.send_photo(
                        tg_id,
                        photo=BufferedInputFile(image_data, filename="notify_10h.jpg"),
                        caption=KEY_RENEWED.format(email=email),
                        reply_markup=keyboard,
                    )
            else:
                await bot.send_message(tg_id, text=KEY_RENEWED.format(email=email), reply_markup=keyboard)

            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {tg_id}.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (10h) –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {tg_id}: {e}")
    else:
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        # –∏ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å—Ç–∞–≤–∏–º notified = TRUE (–¥–∞–∂–µ –µ—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω),
        # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å.
        await send_renewal_notification(
            bot=bot,
            tg_id=tg_id,
            email=email,
            message=message,
            conn=conn,
            client_id=client_id,
            flag="notified",  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 10 —á–∞—Å–æ–≤
            image_name="notify_10h.jpg",  # —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è 10h –∏ 24h
        )


async def notify_24h_keys(bot: Bot, conn: asyncpg.Connection, current_time: float, threshold_time_24h: float):
    """
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ notify_10h_keys, –Ω–æ –∑–∞ 24 —á–∞—Å–∞.
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞...")

    records_24h = await conn.fetch(
        """
        SELECT tg_id, email, expiry_time, client_id, server_id 
        FROM keys 
        WHERE expiry_time <= $1 
          AND expiry_time > $2 
          AND notified_24h = FALSE
        """,
        threshold_time_24h,
        current_time,
    )

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(records_24h)} –∫–ª—é—á–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞.")

    for record in records_24h:
        await process_24h_record(record, bot, conn)

    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def process_24h_record(record, bot, conn):
    tg_id = record["tg_id"]
    email = record["email"]
    expiry_time = record["expiry_time"]
    client_id = record["client_id"]

    moscow_tz = pytz.timezone("Europe/Moscow")
    expiry_date = datetime.fromtimestamp(expiry_time / 1000, tz=moscow_tz)
    current_date = datetime.now(moscow_tz)
    time_left = expiry_date - current_date

    if time_left.total_seconds() <= 0:
        days_left_message = "–ö–ª—é—á –∏—Å—Ç–µ–∫"
    else:
        days_left_message = f"{time_left.days}" if time_left.days > 0 else f"{time_left.seconds // 3600}"

    message_24h = KEY_EXPIRY_24H.format(
        email=email,
        days_left_message=days_left_message,
        expiry_date=expiry_date.strftime("%Y-%m-%d %H:%M:%S"),
    )

    balance = await get_balance(tg_id)

    if AUTO_RENEW_KEYS and balance >= RENEWAL_PLANS["1"]["price"]:
        try:
            # –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
            await update_balance(tg_id, -RENEWAL_PLANS["1"]["price"], conn)
            new_expiry_time = int((datetime.utcnow() + timedelta(days=30)).timestamp() * 1000)

            await update_key_expiry(client_id, new_expiry_time, conn)

            servers = await get_servers(conn)
            for cluster_id in servers:
                await renew_key_in_cluster(cluster_id, email, client_id, new_expiry_time, TOTAL_GB)
                logger.info(f"–ö–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_id}.")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–º—É —Å—Ä–æ–∫—É
            await conn.execute(
                """
                UPDATE keys
                   SET notified = FALSE,
                       notified_24h = FALSE,
                       expiry_time = $2
                 WHERE client_id = $1
            """,
                client_id,
                new_expiry_time,
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
            image_path = os.path.join("img", "notify_24h.jpg")
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]]
            )

            if os.path.isfile(image_path):
                async with aiofiles.open(image_path, "rb") as image_file:
                    image_data = await image_file.read()
                    await bot.send_photo(
                        tg_id,
                        photo=BufferedInputFile(image_data, filename="notify_24h.jpg"),
                        caption=KEY_RENEWED.format(email=email),
                        reply_markup=keyboard,
                    )
            else:
                await bot.send_message(tg_id, text=KEY_RENEWED.format(email=email), reply_markup=keyboard)

            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ (24h) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {tg_id}.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (24h) –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {tg_id}: {e}")

    else:
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥–µ–Ω–µ–≥
        await send_renewal_notification(
            bot=bot,
            tg_id=tg_id,
            email=email,
            message=message_24h,
            conn=conn,
            client_id=client_id,
            flag="notified_24h",
            image_name="notify_24h.jpg",
        )


async def send_renewal_notification(
    bot: Bot,
    tg_id: int,
    email: str,
    message: str,
    conn: asyncpg.Connection,
    client_id: str,
    flag: str,
    image_name: str = "notify_24h.jpg",
):
    """
    –û–±—â–∏–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –ø—Ä–∏ 10—á –∏–ª–∏ 24—á.
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ ‚Äî –≤ –∫–æ–Ω—Ü–µ, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ ¬´—É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω¬ª,
    —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å.
    """
    try:
        keyboard = InlineKeyboardBuilder()
        keyboard.row(types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å VPN", callback_data=f"renew_key|{email}"))
        keyboard.row(types.InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="pay"))
        keyboard.row(types.InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

        image_path = os.path.join("img", image_name)

        if os.path.isfile(image_path):
            async with aiofiles.open(image_path, "rb") as image_file:
                image_data = await image_file.read()
                await bot.send_photo(
                    tg_id,
                    photo=BufferedInputFile(image_data, filename=image_name),
                    caption=message,
                    reply_markup=keyboard.as_markup(),
                )
        else:
            await bot.send_message(tg_id, text=message, reply_markup=keyboard.as_markup())

        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ({flag}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}.")

    except TelegramForbiddenError:
        logger.warning(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {tg_id}. –î–æ–±–∞–≤–ª—è–µ–º –≤ blocked_users.")
        await create_blocked_user(tg_id, conn)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (flag={flag}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")

    finally:
        # –í –õ–Æ–ë–û–ú —Å–ª—É—á–∞–µ (–¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ) —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ.
        # –ò–Ω–∞—á–µ –±—É–¥–µ–º —Å–ª–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å.
        if flag == "notified_24h":
            await conn.execute("UPDATE keys SET notified_24h = TRUE WHERE client_id = $1", client_id)
        elif flag == "notified":
            await conn.execute("UPDATE keys SET notified = TRUE WHERE client_id = $1", client_id)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {flag}")


async def notify_inactive_trial_users(bot: Bot, conn: asyncpg.Connection):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–µ–ª–∏ –±–æ—Ç–∞, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á.
    –ü–æ –ª–æ–≥–∏–∫–µ ‚Äî –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∏ —Å—É—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–∞–ª.
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–∏—Ö –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥...")

    inactive_trial_users = await conn.fetch(
        """
        SELECT tg_id, username, first_name, last_name 
        FROM users 
        WHERE tg_id IN (
            SELECT tg_id FROM connections 
            WHERE trial = 0
        ) 
          AND tg_id NOT IN (
            SELECT DISTINCT tg_id FROM keys
        )
        """
    )
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(inactive_trial_users)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    for user in inactive_trial_users:
        tg_id = user["tg_id"]
        username = user["username"]
        first_name = user["first_name"]
        last_name = user["last_name"]

        display_name = username or first_name or last_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—à–ª–∏ > 24 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.
            can_notify = await check_notification_time(tg_id, "inactive_trial", hours=24, session=conn)
            if can_notify:
                builder = InlineKeyboardBuilder()
                builder.row(
                    types.InlineKeyboardButton(
                        text="üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
                        callback_data="create_key",
                    )
                )
                builder.row(types.InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))
                keyboard = builder.as_markup()

                message = (
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {display_name}!\n\n"
                    f"üéâ –£ —Ç–µ–±—è –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ {TRIAL_TIME} –¥–Ω–µ–π!\n"
                    "üïí –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à VPN –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n"
                    "üí° –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø."
                )

                try:
                    await bot.send_message(tg_id, message, reply_markup=keyboard)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}.")
                    await add_notification(tg_id, "inactive_trial", session=conn)

                except TelegramForbiddenError:
                    logger.warning(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {tg_id}. –î–æ–±–∞–≤–ª—è–µ–º –≤ blocked_users.")
                    await create_blocked_user(tg_id, conn)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e}")

        await asyncio.sleep(1)


async def handle_expired_keys(bot: Bot, conn: asyncpg.Connection, current_time: float):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∏:
    –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞,
    –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º. –ò–Ω–∞—á–µ, –∂–¥—ë–º –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è (DELETE_KEYS_DELAY),
    –ø–æ—Å–ª–µ —á–µ–≥–æ —É–¥–∞–ª—è–µ–º –∫–ª—é—á.
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç –∏–ª–∏ —É–∂–µ –∏—Å—Ç–µ–∫.")

    threshold_time = int((datetime.utcnow() + timedelta(seconds=EXPIRED_KEYS_CHECK_INTERVAL * 1.5)).timestamp() * 1000)

    # –ö–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ—Ç-–≤–æ—Ç –∏—Å—Ç–µ–∫—É—Ç (–≤ —Ç–µ—á–µ–Ω–∏–µ INTERVAL)
    expiring_keys = await conn.fetch(
        """
        SELECT tg_id, client_id, expiry_time, email, server_id 
        FROM keys 
        WHERE expiry_time <= $1 
          AND expiry_time > $2
        """,
        threshold_time,
        current_time,
    )
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(expiring_keys)} –ø–æ–¥–ø–∏—Å–æ–∫, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç.")

    for record in expiring_keys:
        await process_key(record, bot, conn, current_time)

    # –ö–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∏
    expired_keys_query = """
        SELECT tg_id, client_id, email, server_id, expiry_time 
        FROM keys 
        WHERE expiry_time <= $1
    """
    params = (current_time,)

    expired_keys = await conn.fetch(expired_keys_query, *params)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(expired_keys)} –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")

    for record in expired_keys:
        try:
            balance = await get_balance(record["tg_id"])
            expiry_time_value = record["expiry_time"]
            current_time_utc = int(datetime.utcnow().timestamp() * 1000)
            time_since_expiry = current_time_utc - expiry_time_value

            if AUTO_RENEW_KEYS and balance >= RENEWAL_PLANS["1"]["price"]:
                # –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–Ω—å–≥–∏
                await process_key(record, bot, conn, current_time, renew=True)
            else:
                # –ù–µ—Ç –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è ‚Äî —É–¥–∞–ª—è–µ–º –ø–æ –ø—Ä–æ—à–µ—Å—Ç–≤–∏–∏ DELETE_KEYS_DELAY
                await process_key(record, bot, conn, current_time)
                if time_since_expiry >= DELETE_KEYS_DELAY * 1000:
                    await delete_key_from_cluster(
                        cluster_id=record["server_id"], email=record["email"], client_id=record["client_id"]
                    )
                    await delete_key(record["client_id"], conn)
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ {record['client_id']} —É–¥–∞–ª–µ–Ω–∞")

                    message = (
                        f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n"
                        f"üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {record['email']} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è.\n\n"
                        f"‚è≥ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
                        f"üí¨ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
                    )

                    keyboard = InlineKeyboardBuilder()
                    keyboard.row(types.InlineKeyboardButton(text=ADD_SUB, callback_data="create_key"))
                    keyboard.row(types.InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_CHAT_URL))
                    keyboard.row(types.InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

                    image_path = os.path.join("img", "notify_expired.jpg")

                    if os.path.isfile(image_path):
                        async with aiofiles.open(image_path, "rb") as image_file:
                            image_data = await image_file.read()
                            await bot.send_photo(
                                record["tg_id"],
                                photo=BufferedInputFile(image_data, filename="notify_expired.jpg"),
                                caption=message,
                                reply_markup=keyboard.as_markup(),
                            )
                    else:
                        await bot.send_message(record["tg_id"], text=message, reply_markup=keyboard.as_markup())

                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {record['tg_id']}")

                else:
                    remaining_time = (DELETE_KEYS_DELAY * 1000 - time_since_expiry) // 1000
                    logger.info(
                        f"–ü–æ–¥–ø–∏—Å–∫–∞ {record['client_id']} –Ω–µ —É–¥–∞–ª–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {remaining_time} —Å–µ–∫."
                    )

        except TelegramForbiddenError:
            logger.warning(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {record['tg_id']}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {record['client_id']}: {e}")


async def process_key(record, bot, conn, current_time, renew=False):
    """
    –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏:
    - renew=True => –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–∏—Ç—å, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥
    - renew=False => –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–∏—Ç—å/–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫ —É–¥–∞–ª–µ–Ω–∏—é
    """
    tg_id = record["tg_id"]
    client_id = record["client_id"]
    email = record["email"]
    balance = await get_balance(tg_id)
    expiry_time_value = record["expiry_time"]

    moscow_tz = pytz.timezone("Europe/Moscow")
    expiry_date = datetime.fromtimestamp(expiry_time_value / 1000, tz=moscow_tz)
    current_date = datetime.now(moscow_tz)

    logger.info(
        f"–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {expiry_time_value} (–ú–°–ö: {expiry_date}), —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö): {current_date}"
    )

    current_time_utc = int(datetime.utcnow().timestamp() * 1000)
    time_since_expiry = current_time_utc - expiry_time_value

    try:
        if not renew:
            # –ï—Å–ª–∏ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–∏—Ç—å
            if current_time_utc >= expiry_time_value:
                # –ö–ª—é—á —É–∂–µ –∏—Å—Ç—ë–∫ / –ë–∞–≥ DELETE_KEYS_DELAY * 500 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ DELETE_KEYS_DELAY * 1000
                if time_since_expiry <= DELETE_KEYS_DELAY * 1000:
                    message = (
                        f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n"
                        f"üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {email} –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.\n\n"
                    )
                    remaining_time = (expiry_time_value + DELETE_KEYS_DELAY * 1000) - current_time_utc
                    if remaining_time > 0:
                        message += f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ ~{remaining_time // 1000} —Å–µ–∫—É–Ω–¥."

                    await send_notification(bot, tg_id, message, "notify_expired.jpg", email)
                else:
                    # –£–∂–µ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ DELETE_KEYS_DELAY, –∑–Ω–∞—á–∏—Ç —É–¥–∞–ª–∏–º —á—É—Ç—å –≤—ã—à–µ –≤ –∫–æ–¥–µ handle_expired_keys
                    pass
            else:
                # –ö–ª—é—á –µ—â—ë –Ω–µ –∏—Å—Ç—ë–∫, –Ω–æ –¥–æ –∫–æ–Ω—Ü–∞ <= EXPIRED_KEYS_CHECK_INTERVAL?
                # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ
                pass

        elif renew and AUTO_RENEW_KEYS and balance >= RENEWAL_PLANS["1"]["price"]:
            # –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
            await update_balance(tg_id, -RENEWAL_PLANS["1"]["price"], conn)
            new_expiry_time = int((datetime.now(moscow_tz) + timedelta(days=30)).timestamp() * 1000)

            await update_key_expiry(client_id, new_expiry_time, conn)

            servers = await get_servers(conn)
            for cluster_id in servers:
                await renew_key_in_cluster(cluster_id, email, client_id, new_expiry_time, TOTAL_GB)
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ {tg_id} –ø—Ä–æ–¥–ª–µ–Ω–∞ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_id}.")

            # –ü–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
            await conn.execute(
                """
                UPDATE keys
                   SET notified = FALSE,
                       notified_24h = FALSE,
                       expiry_time = $2
                 WHERE client_id = $1
            """,
                client_id,
                new_expiry_time,
            )

            try:
                image_path = os.path.join("img", "notify_expired.jpg")
                caption = KEY_RENEWED.format(email=email)

                if os.path.isfile(image_path):
                    async with aiofiles.open(image_path, "rb") as f:
                        await bot.send_photo(
                            tg_id,
                            photo=BufferedInputFile(await f.read(), filename="notify_expired.jpg"),
                            caption=caption,
                            reply_markup=InlineKeyboardBuilder().as_markup(),
                        )
                else:
                    await bot.send_message(tg_id, text=caption)

                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {tg_id}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {tg_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {tg_id}: {e}")


async def send_notification(bot, tg_id, message, image_name, email):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ —Å–∫–æ—Ä–æ —É–¥–∞–ª–∏—Ç—Å—è.
    """
    keyboard = InlineKeyboardBuilder()
    if DELETE_KEYS_DELAY > 0:
        keyboard.row(types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"renew_key|{email}"))
    keyboard.row(types.InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

    image_path = os.path.join("img", image_name)

    try:
        if os.path.isfile(image_path):
            async with aiofiles.open(image_path, "rb") as f:
                await bot.send_photo(
                    tg_id,
                    photo=BufferedInputFile(await f.read(), filename=image_name),
                    caption=message,
                    reply_markup=keyboard.as_markup(),
                )
        else:
            await bot.send_message(tg_id, text=message, reply_markup=keyboard.as_markup())

    except TelegramForbiddenError:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
