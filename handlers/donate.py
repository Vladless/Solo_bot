import math

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import LabeledPrice, PreCheckoutQuery

from config import RUB_TO_XTR
from keyboards.donate_kb import build_donate_kb, build_donate_back_kb, build_donate_amount_kb
from keyboards.profile_kb import build_profile_back_kb
from logger import logger


class DonateState(StatesGroup):
    entering_donate_amount = State()
    waiting_for_donate_confirmation = State()
    waiting_for_donate_payment = State()


router = Router()


@router.callback_query(F.data == "donate")
async def process_donate(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()

    # Prepare text
    text = (
        "üåü –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç! üí™\n\n"
        "üíñ –ö–∞–∂–¥—ã–π –¥–æ–Ω–∞—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å —Å–µ—Ä–≤–∏—Å. "
        "ü§ù –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–µ–º, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç –µ—â–µ –ª—É—á—à–µ. üöÄüí°"
    )

    # Build keyboard
    kb = build_donate_kb()

    # Answer message
    await callback_query.message.answer(
        text=text,
        reply_markup=kb,
    )


@router.callback_query(F.data == "enter_custom_donate_amount")
async def process_enter_donate_amount(callback_query: types.CallbackQuery, state: FSMContext):
    # Build keyboard
    kb = build_donate_back_kb()

    # Answer message
    await callback_query.message.answer(
        text="üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=kb,
    )
    # Set state
    await state.set_state(
        DonateState.entering_donate_amount
    )


@router.message(DonateState.entering_donate_amount)
async def process_donate_amount_input(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        # Answer message
        await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:")
        return

    amount = int(message.text)
    if amount // RUB_TO_XTR <= 0:
        # Prepare text
        text = (
            f"–°—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {math.ceil(RUB_TO_XTR)}. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:"
        )
        # Answer message
        await message.answer(text=text)
        return

    # Update data and set state
    await state.update_data(amount=amount)
    await state.set_state(DonateState.waiting_for_donate_confirmation)

    try:
        # Build keyboard
        kb = build_donate_amount_kb()

        # Answer message
        await message.answer_invoice(
            title=f"–î–æ–Ω–∞—Ç –ø—Ä–æ–µ–∫—Ç—É {amount} —Ä—É–±–ª–µ–π",
            description="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
            prices=[LabeledPrice(label="–î–æ–Ω–∞—Ç", amount=int(amount // RUB_TO_XTR))],
            provider_token="",
            payload=f"{amount}_donate",
            currency="XTR",
            reply_markup=kb,
        )
        await state.set_state(DonateState.waiting_for_donate_payment)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–Ω–∞—Ç–∞: {e}")

        # Build keyboard
        kb = build_donate_back_kb()

        # Answer anyway
        await message.answer(
            text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–Ω–∞—Ç–∞",
            reply_markup=kb,
        )


@router.pre_checkout_query(DonateState.waiting_for_donate_payment)
async def on_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment, DonateState.waiting_for_donate_payment)
async def on_successful_donate(message: types.Message, state: FSMContext):
    try:
        amount = float(message.successful_payment.invoice_payload.split("_")[0])

        # Build keyboard
        kb = build_profile_back_kb()

        # Answer message
        await message.answer(
            text=f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç {amount} —Ä—É–±–ª–µ–π! –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è –Ω–∞—Å. üíñ",
            reply_markup=kb,
        )
        await state.clear()
    except ValueError as e:  # todo: need to answer user anyway
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ user_id –∏–ª–∏ amount: {e}")
    except Exception as e:  # todo: need to answer user anyway
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–Ω–∞—Ç–∞: {e}")
