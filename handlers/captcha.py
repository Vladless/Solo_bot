import random
import secrets
from typing import Any

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import CAPTCHA_EMOJIS
from logger import logger

router = Router()


async def generate_captcha(message: Message, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∫–∞–ø—á—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    –ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è CAPTCHA_EMOJIS:
    {
        "üê∂": "—Å–æ–±–∞–∫—É",   # –°–æ–±–∞–∫–∞
        "üê±": "–∫–æ—à–∫—É",    # –ö–æ—à–∫–∞
        "üê≠": "–º—ã—à—å",     # –ú—ã—à—å
        "üêπ": "—Ö–æ–º—è–∫–∞",   # –•–æ–º—è–∫
        "üê∞": "–∫—Ä–æ–ª–∏–∫–∞",  # –ö—Ä–æ–ª–∏–∫
        ...
    }
    """
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    correct_emoji, correct_text = secrets.choice(list(CAPTCHA_EMOJIS.items()))

    # –ü–æ–ª—É—á–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —ç–º–æ–¥–∑–∏
    wrong_emojis = random.sample([e for e in CAPTCHA_EMOJIS.keys() if e != correct_emoji], 3)

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–º–æ–¥–∑–∏ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Ö
    all_emojis = [correct_emoji] + wrong_emojis
    random.shuffle(all_emojis)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(correct_emoji=correct_emoji)
    await state.update_data(message=message)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    for emoji in all_emojis:
        builder.button(text=emoji, callback_data=f"captcha_{emoji}")
    builder.adjust(2, 2)

    return {
        "text": f"üîí –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å {correct_text}",
        "markup": builder.as_markup(),
    }


@router.callback_query(F.data.startswith("captcha_"))
async def check_captcha(callback: CallbackQuery, state: FSMContext, session: Any, admin: bool):
    from handlers.start import start_command

    selected_emoji = callback.data.split("captcha_")[1]
    state_data = await state.get_data()
    correct_emoji = state_data.get("correct_emoji")
    message = state_data.get("message", callback.message)

    if selected_emoji == correct_emoji:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É")
        await start_command(message, state, session, admin, False)
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id} –Ω–µ–≤–µ—Ä–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–∞–ø—á—É")
        captcha = await generate_captcha(message, state)
        await callback.message.answer(text=captcha["text"], reply_markup=captcha["markup"])
