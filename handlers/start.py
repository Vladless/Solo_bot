import os
from typing import Any

import aiofiles
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    BufferedInputFile,
    CallbackQuery,
    InlineKeyboardButton,
    Message,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import (
    CAPTCHA_ENABLE,
    CHANNEL_EXISTS,
    CHANNEL_URL,
    CONNECT_ANDROID,
    CONNECT_IOS,
    DONATIONS_ENABLE,
    DOWNLOAD_ANDROID,
    DOWNLOAD_IOS,
    SUPPORT_CHAT_URL,
)
from database import (
    add_connection,
    add_referral,
    check_connection_exists,
    get_coupon_details,
    get_referral_by_referred_id,
    get_trial,
    update_trial,
)
from handlers.buttons.add_subscribe import (
    DOWNLOAD_ANDROID_BUTTON,
    DOWNLOAD_IOS_BUTTON,
    IMPORT_ANDROID,
    IMPORT_IOS,
    PC_BUTTON,
    TV_BUTTON,
)
from handlers.captcha import generate_captcha
from handlers.keys.key_management import create_key
from handlers.keys.trial_key import create_trial_key
from handlers.texts import INSTRUCTIONS_TRIAL, WELCOME_TEXT, get_about_vpn
from logger import logger

router = Router()


@router.callback_query(F.data == "start")
async def handle_start_callback_query(
    callback_query: CallbackQuery, state: FSMContext, session: Any, admin: bool, captcha: bool = False
):
    await start_command(callback_query.message, state, session, admin, captcha)


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext, session: Any, admin: bool, captcha: bool = True):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –≤–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –ø–æ–¥–∞—Ä–∫–æ–≤."""
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è start_command –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")

    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if CAPTCHA_ENABLE and captcha:
        captcha = await generate_captcha(message, state)
        await message.answer(text=captcha["text"], reply_markup=captcha["markup"])
        return

    if message.text:
        try:
            connection_exists = await check_connection_exists(message.chat.id)
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_exists}")

            if not connection_exists:
                await add_connection(tg_id=message.chat.id, session=session)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

            if "gift_" in message.text:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫: {message.text}")
                parts = message.text.split("gift_")[1].split("_")
                gift_id = parts[0]

                recipient_tg_id = message.chat.id

                gift_info = await get_coupon_details(gift_id, session)

                if gift_info is None:
                    logger.warning(f"–ü–æ–¥–∞—Ä–æ–∫ —Å ID {gift_id} —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    await message.answer("–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return await show_start_menu(message, admin, session)

                if gift_info["sender_tg_id"] == recipient_tg_id:
                    logger.warning(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {recipient_tg_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–º —Å–∞–º–∏–º."
                    )
                    await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
                    return await show_start_menu(message, admin, session)

                await add_connection(tg_id=recipient_tg_id, session=session)

                selected_months = gift_info["selected_months"]
                expiry_time = gift_info["expiry_time"]
                expiry_time_naive = expiry_time.replace(tzinfo=None)
                logger.info(f"–ü–æ–¥–∞—Ä–æ–∫ —Å ID {gift_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_tg_id}.")

                await create_key(recipient_tg_id, expiry_time_naive, state, session, message)
                logger.info(f"–ö–ª—é—á —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_tg_id} –Ω–∞ —Å—Ä–æ–∫ {selected_months} –º–µ—Å—è—Ü–µ–≤.")

                await session.execute(
                    "UPDATE gifts SET is_used = TRUE, recipient_tg_id = $1 WHERE gift_id = $2",
                    recipient_tg_id,
                    gift_id,
                )

                await message.answer(
                    f"üéâ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ {selected_months} {'–º–µ—Å—è—Ü' if selected_months == 1 else '–º–µ—Å—è—Ü–∞' if selected_months in [2, 3, 4] else '–º–µ—Å—è—Ü–µ–≤'} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
                )
                logger.info(f"–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ {selected_months} –º–µ—Å—è—Ü–µ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_tg_id}.")
                return

            elif "referral_" in message.text:
                try:
                    referrer_tg_id = int(message.text.split("referral_")[1])

                    if connection_exists:
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.")
                        await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
                        return await show_start_menu(message, admin, session)

                    if referrer_tg_id == message.chat.id:
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
                        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
                        return await show_start_menu(message, admin, session)

                    existing_referral = await get_referral_by_referred_id(message.chat.id, session)

                    if existing_referral:
                        logger.info(f"–†–µ—Ñ–µ—Ä–∞–ª —Å ID {message.chat.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                        return await show_start_menu(message, admin, session)

                    await add_referral(message.chat.id, referrer_tg_id, session)
                    logger.info(f"–†–µ—Ñ–µ—Ä–∞–ª {message.chat.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å—Å—ã–ª–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {referrer_tg_id}")
                    return await show_start_menu(message, admin, session)

                except (ValueError, IndexError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
                return

            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞—à–µ–ª –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø–æ–¥–∞—Ä–∫–∞.")

            await show_start_menu(message, admin, session)

        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await show_start_menu(message, admin, session)


async def show_start_menu(message: Message, admin: bool, session: Any):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    trial_status = await get_trial(message.chat.id, session)
    image_path = os.path.join("img", "pic.jpg")

    builder = InlineKeyboardBuilder()

    if trial_status == 0:
        builder.row(InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="connect_vpn"))

    builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

    if CHANNEL_EXISTS:
        builder.row(
            InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_CHAT_URL),
            InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª", url=CHANNEL_URL),
        )
    else:
        builder.row(InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_CHAT_URL))

    if admin:
        builder.row(InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin"))

    builder.row(InlineKeyboardButton(text="üåê –û VPN", callback_data="about_vpn"))

    if os.path.isfile(image_path):
        async with aiofiles.open(image_path, "rb") as image_from_buffer:
            image_data = await image_from_buffer.read()
            await message.answer_photo(
                photo=BufferedInputFile(image_data, filename="pic.jpg"),
                caption=WELCOME_TEXT,
                reply_markup=builder.as_markup(),
            )
    else:
        await message.answer(
            text=WELCOME_TEXT,
            reply_markup=builder.as_markup(),
        )


@router.callback_query(F.data == "connect_vpn")
async def handle_connect_vpn(callback_query: CallbackQuery, session: Any):
    user_id = callback_query.message.chat.id

    trial_key_info = await create_trial_key(user_id, session)

    if "error" in trial_key_info:
        await callback_query.message.answer(trial_key_info["error"])
    else:
        await update_trial(user_id, 1, session)

        key_message = (
            f"üîë <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:</b>\n"
            f"<code>{trial_key_info['key']}</code>\n\n"
            f"üìã <b>–ë—ã—Å—Ç—Ä–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:</b>\n{INSTRUCTIONS_TRIAL}"
        )

        email = trial_key_info["email"]

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_CHAT_URL))
        builder.row(
            InlineKeyboardButton(text=DOWNLOAD_IOS_BUTTON, url=DOWNLOAD_IOS),
            InlineKeyboardButton(text=DOWNLOAD_ANDROID_BUTTON, url=DOWNLOAD_ANDROID),
        )
        builder.row(
            InlineKeyboardButton(
                text=IMPORT_IOS,
                url=f"{CONNECT_IOS}{trial_key_info['key']}",
            ),
            InlineKeyboardButton(
                text=IMPORT_ANDROID,
                url=f"{CONNECT_ANDROID}{trial_key_info['key']}",
            ),
        )
        builder.row(
            InlineKeyboardButton(text=PC_BUTTON, callback_data=f"connect_pc|{email}"),
            InlineKeyboardButton(text=TV_BUTTON, callback_data=f"connect_tv|{email}"),
        )
        builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

        await callback_query.message.answer(key_message, reply_markup=builder.as_markup())


@router.callback_query(F.data == "about_vpn")
async def handle_about_vpn(callback_query: CallbackQuery):
    builder = InlineKeyboardBuilder()

    if DONATIONS_ENABLE:
        builder.row(InlineKeyboardButton(text="üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="donate"))

    builder.row(
        InlineKeyboardButton(text="üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_CHAT_URL),
    )
    if CHANNEL_EXISTS:
        builder.row(
            InlineKeyboardButton(text="üì¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª", url=CHANNEL_URL),
        )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start"))

    await callback_query.message.answer(get_about_vpn("3.2.3-minor"), reply_markup=builder.as_markup())
