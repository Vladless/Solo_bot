import os

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import NEWS_MESSAGE, RENEWAL_PLANS
from database import get_balance, get_key_count, get_referral_stats
from handlers.texts import get_referral_link, invite_message_send, profile_message_send
from keyboards.profile_kb import build_profile_kb, build_profile_back_kb

router = Router()


@router.callback_query(F.data == "profile")
async def process_callback_view_profile(callback_query: types.CallbackQuery, state: FSMContext, admin: bool):
    chat_id = callback_query.message.chat.id
    username = callback_query.from_user.full_name
    image_path = os.path.join("img", "pic.jpg")
    key_count = await get_key_count(chat_id)
    balance = await get_balance(chat_id) or 0

    profile_message = profile_message_send(username, chat_id, int(balance), key_count)

    if key_count == 0:
        profile_message += "\n<pre>üîß <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ûï –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</i></pre>"
    else:
        profile_message += f"\n<pre>üîß <i>{NEWS_MESSAGE}</i></pre>"

    # Build profile keyboard
    kb = build_profile_kb(admin)

    # Answer message
    if os.path.isfile(image_path):
        with open(image_path, "rb") as image_file:
            await callback_query.message.answer_photo(
                photo=BufferedInputFile(image_file.read(), filename="pic.jpg"),
                caption=profile_message,
                reply_markup=kb,
            )
    else:
        await callback_query.message.answer(
            text=profile_message,
            reply_markup=kb,
        )


@router.callback_query(F.data == "view_tariffs")
async def view_tariffs_handler(callback_query: types.CallbackQuery):
    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    image_path = os.path.join("img", "tariffs.jpg")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
    tariffs_message = (
        "<b>üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã VPN:</b>\n\n"
        + "\n".join(
            [
                f"{months} {'–º–µ—Å—è—Ü' if months == '1' else '–º–µ—Å—è—Ü–∞' if int(months) in [2, 3, 4] else '–º–µ—Å—è—Ü–µ–≤'}: "
                f"{RENEWAL_PLANS[months]['price']} "
                f"{'üí≥' if months == '1' else 'üåü' if months == '3' else 'üî•' if months == '6' else 'üöÄ'} —Ä—É–±–ª–µ–π"
                for months in sorted(RENEWAL_PLANS.keys(), key=int)
            ]
        )
    )

    # Build back keyboard
    kb = build_profile_back_kb()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if os.path.isfile(image_path):
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        with open(image_path, "rb") as image_file:
            await callback_query.message.answer_photo(
                photo=BufferedInputFile(image_file.read(), filename="tariffs.jpg"),
                caption=tariffs_message,
                reply_markup=kb,
            )
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await callback_query.message.answer(
            text=tariffs_message,
            reply_markup=kb,
        )


@router.callback_query(F.data == "invite")
async def invite_handler(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    referral_link = get_referral_link(chat_id)

    referral_stats = await get_referral_stats(chat_id)
    invite_message = invite_message_send(referral_link, referral_stats)
    image_path = os.path.join("img", "pic_invite.jpg")

    # Build back keyboard
    kb = build_profile_back_kb()

    if os.path.isfile(image_path):
        with open(image_path, "rb") as image_file:
            await callback_query.message.answer_photo(
                photo=BufferedInputFile(image_file.read(), filename="pic_invite.jpg"),
                caption=invite_message,
                reply_markup=kb,
            )
    else:
        await callback_query.message.answer(
            text=invite_message,
            reply_markup=kb,
        )
