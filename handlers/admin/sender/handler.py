import asyncio
import json
import re
from datetime import datetime

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from sqlalchemy import distinct, func, select
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import Key, Payment, Server, User
from filters.admin import IsAdminFilter
from logger import logger
from .keyboard import AdminSenderCallback, build_clusters_kb, build_sender_kb
from ..panel.keyboard import AdminPanelCallback, build_admin_back_kb

router = Router()


async def send_broadcast_batch(bot, messages, batch_size=15):
    results = []

    for i in range(0, len(messages), batch_size):
        batch = messages[i : i + batch_size]
        tasks = []

        for msg in batch:
            tg_id = msg["tg_id"]
            text = msg["text"]
            photo = msg.get("photo")
            keyboard = msg.get("keyboard")

            if photo:
                task = bot.send_photo(
                    chat_id=tg_id, photo=photo, caption=text, parse_mode="HTML", reply_markup=keyboard
                )
            else:
                task = bot.send_message(chat_id=tg_id, text=text, parse_mode="HTML", reply_markup=keyboard)
            tasks.append(task)

        batch_results = await asyncio.gather(*tasks, return_exceptions=True)

        for result in batch_results:
            if isinstance(result, Exception):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
                results.append(False)
            else:
                results.append(True)

        if i + batch_size < len(messages):
            await asyncio.sleep(1.0)

    return results


class AdminSender(StatesGroup):
    waiting_for_message = State()
    preview = State()


def parse_message_buttons(text: str) -> tuple[str, InlineKeyboardMarkup | None]:
    if "BUTTONS:" not in text:
        return text, None

    parts = text.split("BUTTONS:", 1)
    clean_text = parts[0].strip()
    buttons_text = parts[1].strip()

    if not buttons_text:
        return clean_text, None

    buttons = []
    button_lines = [line.strip() for line in buttons_text.split("\n") if line.strip()]

    for line in button_lines:
        try:
            cleaned_line = re.sub(r'<tg-emoji emoji-id="[^"]*">([^<]*)</tg-emoji>', r"\1", line)

            button_data = json.loads(cleaned_line)

            if not isinstance(button_data, dict) or "text" not in button_data:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: {line}")
                continue

            text_btn = button_data["text"]

            if "callback" in button_data:
                callback_data = button_data["callback"]
                if len(callback_data) > 64:
                    logger.warning(f"Callback —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {callback_data}")
                    continue
                button = InlineKeyboardButton(text=text_btn, callback_data=callback_data)
            elif "url" in button_data:
                url = button_data["url"]
                button = InlineKeyboardButton(text=text_btn, url=url)
            else:
                logger.warning(f"–ö–Ω–æ–ø–∫–∞ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è: {line}")
                continue

            buttons.append([button])

        except json.JSONDecodeError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∫–Ω–æ–ø–∫–∏: {line} - {e}")
            continue
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {line} - {e}")
            continue

    if not buttons:
        return clean_text, None

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return clean_text, keyboard


@router.callback_query(
    AdminPanelCallback.filter(F.action == "sender"),
    IsAdminFilter(),
)
async def handle_sender(callback_query: CallbackQuery):
    try:
        await callback_query.message.edit_text(
            text="‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=build_sender_kb(),
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logger.debug("[Sender] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, Telegram –æ—Ç–∫–ª–æ–Ω–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        else:
            raise


@router.callback_query(
    AdminSenderCallback.filter(F.type != "cluster-select"),
    IsAdminFilter(),
)
async def handle_sender_callback_text(
    callback_query: CallbackQuery, callback_data: AdminSenderCallback, state: FSMContext
):
    await callback_query.message.edit_text(
        text=(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Telegram-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i> –∏ –¥—Ä—É–≥–∏–µ —Å—Ç–∏–ª–∏ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ <b>—Ç–µ–∫—Å—Ç</b>\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ <b>–∫–∞—Ä—Ç–∏–Ω–∫—É</b>\n"
            "‚Ä¢ <b>–¢–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫—É</b>\n"
            "‚Ä¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∏</b> (—Å–º. —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∂–µ)\n\n"
            "<b>üìã –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–æ–ø–æ–∫:</b>\n"
            "<code>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</code>\n\n"
            "<code>BUTTONS:</code>\n"
            '<code>{"text": "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "callback": "profile"}</code>\n'
            '<code>{"text": "‚ûï –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback": "buy"}</code>\n'
            '<code>{"text": "üéÅ –ó–∞–±—Ä–∞—Ç—å –∫—É–ø–æ–Ω", "url": "https://t.me/cupons"}</code>\n'
            '<code>{"text": "üì¢ –ö–∞–Ω–∞–ª", "url": "https://t.me/channel"}</code>'
        ),
        reply_markup=build_admin_back_kb("sender"),
    )
    await state.update_data(type=callback_data.type, cluster_name=callback_data.data)
    await state.set_state(AdminSender.waiting_for_message)


@router.callback_query(
    AdminSenderCallback.filter(F.type == "cluster-select"),
    IsAdminFilter(),
)
async def handle_sender_callback(callback_query: CallbackQuery, session: AsyncSession):
    result = await session.execute(select(Server.cluster_name).distinct())
    clusters = result.mappings().all()

    await callback_query.message.answer(
        "‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:",
        reply_markup=build_clusters_kb(clusters),
    )


@router.message(AdminSender.waiting_for_message, IsAdminFilter())
async def handle_message_input(message: Message, state: FSMContext):
    original_text = message.html_text or message.text or message.caption or ""
    photo = message.photo[-1].file_id if message.photo else None

    clean_text, keyboard = parse_message_buttons(original_text)

    max_len = 1024 if photo else 4096
    if len(clean_text) > max_len:
        await message.answer(
            f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.\n–ú–∞–∫—Å–∏–º—É–º: <b>{max_len}</b> —Å–∏–º–≤–æ–ª–æ–≤, —Å–µ–π—á–∞—Å: <b>{len(clean_text)}</b>.",
            reply_markup=build_admin_back_kb("sender"),
        )
        await state.clear()
        return

    await state.update_data(text=clean_text, photo=photo, keyboard=keyboard.model_dump() if keyboard else None)
    await state.set_state(AdminSender.preview)

    if photo:
        await message.answer_photo(photo=photo, caption=clean_text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer(text=clean_text, parse_mode="HTML", reply_markup=keyboard)

    await message.answer(
        "üëÄ –≠—Ç–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏.\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_message"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_message"),
                ]
            ]
        ),
    )


@router.callback_query(F.data == "send_message", IsAdminFilter())
async def handle_send_confirm(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    text_message = data.get("text")
    photo = data.get("photo")
    keyboard_data = data.get("keyboard")
    send_to = data.get("type", "all")
    cluster_name = data.get("cluster_name")
    now_ms = int(datetime.utcnow().timestamp() * 1000)

    keyboard = None
    if keyboard_data:
        try:
            keyboard = InlineKeyboardMarkup.model_validate(keyboard_data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

    query = None
    if send_to == "subscribed":
        query = select(distinct(User.tg_id)).join(Key).where(Key.expiry_time > now_ms)
    elif send_to == "unsubscribed":
        subquery = (
            select(User.tg_id)
            .outerjoin(Key, User.tg_id == Key.tg_id)
            .group_by(User.tg_id)
            .having(func.count(Key.tg_id) == 0)
            .union_all(
                select(User.tg_id)
                .join(Key, User.tg_id == Key.tg_id)
                .group_by(User.tg_id)
                .having(func.max(Key.expiry_time) <= now_ms)
            )
        )
        query = select(distinct(subquery.c.tg_id))
    elif send_to == "untrial":
        subquery = select(Key.tg_id)
        query = select(distinct(User.tg_id)).where(~User.tg_id.in_(subquery) & User.trial.in_([0, -1]))
    elif send_to == "cluster":
        query = (
            select(distinct(User.tg_id))
            .join(Key, User.tg_id == Key.tg_id)
            .join(Server, Key.server_id == Server.cluster_name)
            .where(Server.cluster_name == cluster_name)
        )
    elif send_to == "hotleads":
        subquery = select(Key.tg_id)
        query = (
            select(distinct(User.tg_id))
            .join(Payment, User.tg_id == Payment.tg_id)
            .where(Payment.status == "success")
            .where(~User.tg_id.in_(subquery))
        )
    else:
        query = select(distinct(User.tg_id))

    result = await session.execute(query)
    tg_ids = [row[0] for row in result.all()]

    total_users = len(tg_ids)
    success_count = 0

    await callback_query.message.edit_text(f"üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!</b>\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users}")

    messages = []
    for tg_id in tg_ids:
        message_data = {"tg_id": tg_id, "text": text_message, "photo": photo, "keyboard": keyboard}
        messages.append(message_data)

    results = await send_broadcast_batch(bot=callback_query.bot, messages=messages, batch_size=15)

    success_count = sum(1 for result in results if result)

    await callback_query.message.answer(
        text=(
            f"üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
            f"‚úÖ <b>–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> {success_count}\n"
            f"‚ùå <b>–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> {total_users - success_count}"
        ),
        reply_markup=build_admin_back_kb("sender"),
    )
    await state.clear()


@router.callback_query(F.data == "cancel_message", IsAdminFilter())
async def handle_send_cancel(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=build_admin_back_kb("sender"),
    )
    await state.clear()
