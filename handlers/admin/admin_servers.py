import asyncpg
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from py3xui import AsyncApi

from backup import create_backup_and_send_to_admins
from config import ADMIN_PASSWORD, ADMIN_USERNAME, DATABASE_URL
from database import check_unique_server_name, get_servers_from_db
from filters.admin import IsAdminFilter
from keyboards.admin.panel_kb import AdminPanelCallback, build_admin_back_kb
from keyboards.admin.servers_kb import build_cancel_kb, build_manage_server_kb, \
    build_delete_server_kb, \
    build_manage_cluster_kb, build_clusters_editor_kb, AdminServerEditorCallback

router = Router()


class AdminServersEditor(StatesGroup):
    waiting_for_cluster_name = State()
    waiting_for_api_url = State()
    waiting_for_inbound_id = State()
    waiting_for_server_name = State()
    waiting_for_subscription_url = State()


@router.callback_query(
    AdminPanelCallback.filter(F.action == "servers_editor"),
    IsAdminFilter(),
)
async def handle_servers_editor(
        callback_query: types.CallbackQuery
):
    servers = await get_servers_from_db()

    text = (
        "<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏</b>\n\n"
        "<i>üìå –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä.</i>\n\n"
        "<i>üåê <b>–ö–ª–∞—Å—Ç–µ—Ä—ã</b> ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤, –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞.</i>\n"
        "üí° –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ 1 —Å–µ—Ä–≤–µ—Ä—É, —Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–µ–≥–æ 1 —Å–µ—Ä–≤–µ—Ä –≤ –∫–ª–∞—Å—Ç–µ—Ä.\n\n"
        "<i>‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ö–ª–∞—Å—Ç–µ—Ä—ã —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö.</i>\n\n"
    )

    await callback_query.message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=build_clusters_editor_kb(servers),
    )


@router.callback_query(
    AdminPanelCallback.filter(F.action == "clusters_add"),
    IsAdminFilter(),
)
async def handle_add_cluster(
        callback_query: types.CallbackQuery,
        state: FSMContext
):
    text = (
        "üîß <b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞:</b>\n\n"
        "<b>–ò–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º!</b>\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>cluster1</code> –∏–ª–∏ <code>us_east_1</code>"
    )

    await callback_query.message.answer(
        text=text,
        parse_mode="HTML",
    )

    await state.set_state(AdminServersEditor.waiting_for_cluster_name)


@router.message(
    AdminServersEditor.waiting_for_cluster_name,
    IsAdminFilter()
)
async def handle_cluster_name_input(
        message: types.Message,
        state: FSMContext
):
    if not message.text:
        await message.answer(
            text="‚ùå –ò–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    cluster_name = message.text.strip()
    await state.update_data(cluster_name=cluster_name)

    text = (
        f"<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}:</b>\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∏–º–µ–Ω–∏.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>server-frankfurt1</code>, <code>fra1</code>"
    )

    await message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=build_admin_back_kb("servers_editor"),
    )

    await state.set_state(AdminServersEditor.waiting_for_server_name)


@router.message(
    AdminServersEditor.waiting_for_server_name,
    IsAdminFilter()
)
async def handle_server_name_input(
        message: types.Message,
        state: FSMContext
):
    if not message.text:
        await message.answer(
            text="‚ùå –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    server_name = message.text.strip()

    if not await check_unique_server_name(server_name):
        await message.answer(
            text="‚ùå –°–µ—Ä–≤–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è."
        )
        return

    user_data = await state.get_data()
    cluster_name = user_data.get("cluster_name")
    await state.update_data(server_name=server_name)

    text = (
        f"<b>–í–≤–µ–¥–∏—Ç–µ API URL –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}:</b>\n\n"
        "API URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>https://your_domain:port/panel_path</code>\n\n"
        "URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑ —Å–ª—ç—à–∞ –Ω–∞ –∫–æ–Ω—Ü–µ!\n"
    )

    await message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=build_admin_back_kb("servers_editor"),
    )

    await state.set_state(AdminServersEditor.waiting_for_api_url)


@router.message(
    AdminServersEditor.waiting_for_api_url,
    IsAdminFilter()
)
async def handle_api_url_input(
        message: types.Message,
        state: FSMContext
):
    if not message.text or not message.text.strip().startswith("https://"):
        await message.answer(
            text="‚ùå API URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>https://</code>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML",
        )
        return

    api_url = message.text.strip().rstrip("/")

    user_data = await state.get_data()
    cluster_name = user_data.get("cluster_name")
    server_name = user_data.get("server_name")
    await state.update_data(api_url=api_url)

    text = (
        f"<b>–í–≤–µ–¥–∏—Ç–µ subscription_url –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}:</b>\n\n"
        "Subscription URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>https://your_domain:port_sub/sub_path</code>\n\n"
        "URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑ —Å–ª—ç—à–∞ –∏ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∫–æ–Ω—Ü–µ!\n"
        "–ï–≥–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ 3x-ui –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ."
    )

    await message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=build_cancel_kb(),
    )

    await state.set_state(AdminServersEditor.waiting_for_subscription_url)


@router.message(
    AdminServersEditor.waiting_for_subscription_url,
    IsAdminFilter()
)
async def handle_subscription_url_input(
        message: types.Message,
        state: FSMContext
):
    if not message.text or not message.text.strip().startswith("https://"):
        await message.answer(
            text="‚ùå subscription_url –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>https://</code>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML",
        )
        return

    subscription_url = message.text.strip().rstrip("/")

    user_data = await state.get_data()
    cluster_name = user_data.get("cluster_name")
    server_name = user_data.get("server_name")
    await state.update_data(subscription_url=subscription_url)

    text = (
        f"<b>–í–≤–µ–¥–∏—Ç–µ inbound_id –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}:</b>\n\n"
        "–≠—Ç–æ –Ω–æ–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è vless –≤ –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ 3x-ui. –û–±—ã—á–Ω–æ —ç—Ç–æ <b>1</b> –ø—Ä–∏ —á–∏—Å—Ç–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ –≥–∞–π–¥—É.\n\n"
    )

    await message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=build_admin_back_kb("servers_editor"),
    )
    await state.set_state(AdminServersEditor.waiting_for_inbound_id)


@router.message(
    AdminServersEditor.waiting_for_inbound_id,
    IsAdminFilter()
)
async def handle_inbound_id_input(
        message: types.Message,
        state: FSMContext
):
    inbound_id = message.text.strip()

    if not inbound_id.isdigit():
        await message.answer(
            text="‚ùå inbound_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    user_data = await state.get_data()
    cluster_name = user_data.get("cluster_name")
    server_name = user_data.get("server_name")
    api_url = user_data.get("api_url")
    subscription_url = user_data.get("subscription_url")

    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        """
        INSERT INTO servers (cluster_name, server_name, api_url, subscription_url, inbound_id) 
        VALUES ($1, $2, $3, $4, $5)
        """,
        cluster_name,
        server_name,
        api_url,
        subscription_url,
        inbound_id,
    )
    await conn.close()

    await message.answer(
        text=f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä {cluster_name} –∏ —Å–µ—Ä–≤–µ—Ä {server_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!",
        reply_markup=build_admin_back_kb("servers_editor"),
    )

    await state.clear()


@router.callback_query(
    AdminServerEditorCallback.filter(F.action == "clusters_manage"),
    IsAdminFilter()
)
async def handle_manage_cluster(
        callback_query: types.CallbackQuery,
        callback_data: AdminServerEditorCallback,
):
    cluster_name = callback_data.data

    servers = await get_servers_from_db()
    cluster_servers = servers.get(cluster_name, [])

    await callback_query.message.answer(
        text=f"üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}",
        reply_markup=build_manage_cluster_kb(cluster_servers, cluster_name),
    )


@router.callback_query(
    AdminServerEditorCallback.filter(F.action == "servers_availability"),
    IsAdminFilter()
)
async def handle_check_server_availability(
        callback_query: types.CallbackQuery,
        callback_data: AdminServerEditorCallback
):
    cluster_name = callback_data.data

    servers = await get_servers_from_db()
    cluster_servers = servers.get(cluster_name, [])

    if not cluster_servers:
        await callback_query.answer(
            text=f"–ö–ª–∞—Å—Ç–µ—Ä '{cluster_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤."
        )
        return

    text = (
        f"üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}.\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    in_progress_message = await callback_query.message.answer(
        text=text
    )

    text = (
        f"üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n"
    )

    for server in cluster_servers:
        xui = AsyncApi(
            server["api_url"], username=ADMIN_USERNAME, password=ADMIN_PASSWORD
        )

        try:
            await xui.login()

            online_users = len(await xui.client.online())
            text += (
                f"üåç {server['server_name']}: {online_users} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            )

        except Exception as e:
            text += f"‚ùå {server['server_name']}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –û—à–∏–±–∫–∞: {e}\n"

    await in_progress_message.edit_text(
        text=text,
        reply_markup=build_admin_back_kb("servers_editor")
    )

    await callback_query.answer()


@router.callback_query(
    AdminServerEditorCallback.filter(F.action == "servers_manage"),
    IsAdminFilter()
)
async def handle_manage_server(
        callback_query: types.CallbackQuery,
        callback_data: AdminServerEditorCallback
):
    server_name = callback_data.data
    servers = await get_servers_from_db()

    cluster_name, server = next(
        ((c, s) for c, cs in servers.items()
         for s in cs if s["server_name"] == server_name),
        (None, None)
    )

    if server:
        api_url = server["api_url"]
        subscription_url = server["subscription_url"]
        inbound_id = server["inbound_id"]

        text = (
            f"<b>üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {server_name}:</b>\n\n"
            f"<b>üì° API URL:</b> {api_url}\n"
            f"<b>üåê Subscription URL:</b> {subscription_url}\n"
            f"<b>üîë Inbound ID:</b> {inbound_id}"
        )

        await callback_query.message.answer(
            text=text,
            parse_mode="HTML",
            reply_markup=build_manage_server_kb(server_name, cluster_name),
        )
    else:
        await callback_query.message.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(
    AdminServerEditorCallback.filter(F.action == "servers_delete"),
    IsAdminFilter()
)
async def handle_delete_server(
        callback_query: types.CallbackQuery,
        callback_data: AdminServerEditorCallback
):
    server_name = callback_data.data

    await callback_query.message.answer(
        text=f"üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä {server_name}?",
        reply_markup=build_delete_server_kb(server_name),
    )


@router.callback_query(
    AdminServerEditorCallback.filter(F.action == "servers_delete_confirm"),
    IsAdminFilter()
)
async def handle_confirm_delete_server(
        callback_query: types.CallbackQuery,
        callback_data: AdminServerEditorCallback
):
    server_name = callback_data.data

    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        """
        DELETE FROM servers WHERE server_name = $1
        """,
        server_name,
    )
    await conn.close()

    await callback_query.message.answer(
        text=f"üóëÔ∏è –°–µ—Ä–≤–µ—Ä {server_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
        reply_markup=build_admin_back_kb("servers_editor")
    )


@router.callback_query(
    AdminServerEditorCallback.filter(F.action == "servers_add"),
    IsAdminFilter()
)
async def handle_add_server(
        callback_query: types.CallbackQuery,
        callback_data: AdminServerEditorCallback,
        state: FSMContext
):
    cluster_name = callback_data.data

    await state.update_data(cluster_name=cluster_name)

    text = (
        f"<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}:</b>\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∏–º–µ–Ω–∏.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>server-asia</code>, <code>server-europe</code>"
    )

    await callback_query.message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=build_admin_back_kb("servers_editor"),
    )

    await state.set_state(AdminServersEditor.waiting_for_server_name)


@router.callback_query(
    AdminServerEditorCallback.filter(F.action == "clusters_backup"),
    IsAdminFilter()
)
async def handle_backup_cluster(
        callback_query: types.CallbackQuery,
        callback_data: AdminServerEditorCallback,
):
    cluster_name = callback_data.data

    servers = await get_servers_from_db()
    cluster_servers = servers.get(cluster_name, [])

    for server in cluster_servers:
        xui = AsyncApi(
            server["api_url"],
            username=ADMIN_USERNAME,
            password=ADMIN_PASSWORD,
        )
        await create_backup_and_send_to_admins(xui)

    text = (
        f"<b>–ë—ç–∫–∞–ø –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!</b>\n\n"
        f"üîî <i>–ë—ç–∫–∞–ø—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç—ã –ø–∞–Ω–µ–ª–µ–π.</i>"
    )

    await callback_query.message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=build_admin_back_kb("servers_editor"),
    )
    await callback_query.answer()
