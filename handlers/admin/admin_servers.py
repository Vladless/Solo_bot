import asyncio

import asyncpg
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from py3xui import AsyncApi

from backup import create_backup_and_send_to_admins
from config import ADMIN_PASSWORD, ADMIN_USERNAME, DATABASE_URL
from database import check_unique_server_name, get_servers_from_db
from filters.admin import IsAdminFilter
from handlers.keys.key_utils import create_key_on_cluster
from logger import logger

router = Router()


class UserEditorState(StatesGroup):
    waiting_for_cluster_name = State()
    waiting_for_api_url = State()
    waiting_for_inbound_id = State()
    waiting_for_server_name = State()
    waiting_for_subscription_url = State()


@router.callback_query(F.data == "servers_editor", IsAdminFilter())
async def handle_servers_editor(callback_query: types.CallbackQuery):
    servers = await get_servers_from_db()

    builder = InlineKeyboardBuilder()

    for cluster_name, cluster_servers in servers.items():
        builder.row(InlineKeyboardButton(text=f"‚öôÔ∏è {cluster_name}", callback_data=f"manage_cluster|{cluster_name}"))

    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä", callback_data="add_cluster"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin"))

    await callback_query.message.answer(
        "<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏</b>\n\n"
        "<i>üìå –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä.</i>\n\n"
        "<i>üåê <b>–ö–ª–∞—Å—Ç–µ—Ä—ã</b> ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤, –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞.</i>\n"
        "üí° –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ 1 —Å–µ—Ä–≤–µ—Ä—É, —Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–µ–≥–æ 1 —Å–µ—Ä–≤–µ—Ä –≤ –∫–ª–∞—Å—Ç–µ—Ä.\n\n"
        "<i>‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ö–ª–∞—Å—Ç–µ—Ä—ã —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö.</i>\n\n",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data == "add_cluster", IsAdminFilter())
async def handle_add_cluster(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "üîß <b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞:</b>\n\n"
        "<b>–ò–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.</b>\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>cluster2</code> –∏–ª–∏ <code>us_east_1</code>"
    )

    await state.set_state(UserEditorState.waiting_for_cluster_name)


@router.message(UserEditorState.waiting_for_cluster_name, IsAdminFilter())
async def handle_cluster_name_input(message: types.Message, state: FSMContext):
    cluster_name = message.text.strip()

    if cluster_name == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏", callback_data="servers_editor"))
        await message.answer(
            "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏.",
            reply_markup=builder.as_markup(),
        )
        return

    if not cluster_name:
        await message.answer("‚ùå –ò–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(cluster_name=cluster_name)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="servers_editor"))

    await message.answer(
        f"<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}:</b>\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∏–º–µ–Ω–∏.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>server-asia</code>, <code>server-europe</code>",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(UserEditorState.waiting_for_server_name)


@router.message(UserEditorState.waiting_for_server_name, IsAdminFilter())
async def handle_server_name_input(message: types.Message, state: FSMContext):
    server_name = message.text.strip()

    if server_name == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏", callback_data="servers_editor"))
        await message.answer(
            "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏.",
            reply_markup=builder.as_markup(),
        )
        return

    if not server_name:
        await message.answer("‚ùå –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    server_unique = await check_unique_server_name(server_name)
    if not server_unique:
        await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
        return

    user_data = await state.get_data()
    cluster_name = user_data.get("cluster_name")
    await state.update_data(server_name=server_name)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="servers_editor"))

    await message.answer(
        f"<b>–í–≤–µ–¥–∏—Ç–µ API URL –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}:</b>\n\n"
        "API URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>https://your_domain:port/panel_path</code>\n\n"
        "URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑ —Å–ª—ç—à–∞ –Ω–∞ –∫–æ–Ω—Ü–µ!\n",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(UserEditorState.waiting_for_api_url)


@router.message(UserEditorState.waiting_for_api_url, IsAdminFilter())
async def handle_api_url_input(message: types.Message, state: FSMContext):
    api_url = message.text.strip()

    if api_url == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏", callback_data="servers_editor"))
        await message.answer(
            "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏.",
            reply_markup=builder.as_markup(),
        )
        return

    if not api_url.startswith("https://"):
        await message.answer(
            "‚ùå API URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>https://</code>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        return

    api_url = api_url.rstrip("/")

    user_data = await state.get_data()
    cluster_name = user_data.get("cluster_name")
    server_name = user_data.get("server_name")
    await state.update_data(api_url=api_url)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="servers_editor"))

    await message.answer(
        f"<b>–í–≤–µ–¥–∏—Ç–µ subscription_url –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}:</b>\n\n"
        "Subscription URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>https://your_domain:port_sub/sub_path</code>\n\n"
        "URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑ —Å–ª—ç—à–∞ –∏ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∫–æ–Ω—Ü–µ!\n"
        "–ï–≥–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ 3x-ui –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ.",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(UserEditorState.waiting_for_subscription_url)


@router.message(UserEditorState.waiting_for_subscription_url, IsAdminFilter())
async def handle_subscription_url_input(message: types.Message, state: FSMContext):
    subscription_url = message.text.strip()

    if subscription_url == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏", callback_data="servers_editor"))
        await message.answer(
            "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏.",
            reply_markup=builder.as_markup(),
        )
        return

    if not subscription_url.startswith("https://"):
        await message.answer(
            "‚ùå subscription_url –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>https://</code>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        return

    subscription_url = subscription_url.rstrip("/")

    user_data = await state.get_data()
    cluster_name = user_data.get("cluster_name")
    server_name = user_data.get("server_name")
    await state.update_data(subscription_url=subscription_url)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="servers_editor"))

    await message.answer(
        f"<b>–í–≤–µ–¥–∏—Ç–µ inbound_id –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}:</b>\n\n"
        "–≠—Ç–æ –Ω–æ–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è vless –≤ –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ 3x-ui. –û–±—ã—á–Ω–æ —ç—Ç–æ <b>1</b> –ø—Ä–∏ —á–∏—Å—Ç–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ –≥–∞–π–¥—É.\n\n",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(UserEditorState.waiting_for_inbound_id)


@router.message(UserEditorState.waiting_for_inbound_id, IsAdminFilter())
async def handle_inbound_id_input(message: types.Message, state: FSMContext):
    inbound_id = message.text.strip()

    if not inbound_id.isdigit():
        await message.answer("‚ùå inbound_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_data = await state.get_data()
    cluster_name = user_data.get("cluster_name")
    server_name = user_data.get("server_name")
    api_url = user_data.get("api_url")
    subscription_url = user_data.get("subscription_url")

    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        """
        INSERT INTO servers (cluster_name, server_name, api_url, subscription_url, inbound_id) 
        VALUES ($1, $2, $3, $4, $5)
        """,
        cluster_name,
        server_name,
        api_url,
        subscription_url,
        inbound_id,
    )
    await conn.close()

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Ç–µ—Ä–∞–º", callback_data="servers_editor"))

    await message.answer(
        f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä {cluster_name} –∏ —Å–µ—Ä–≤–µ—Ä {server_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!",
        reply_markup=builder.as_markup(),
    )

    await state.clear()


@router.callback_query(F.data.startswith("manage_cluster|"), IsAdminFilter())
async def handle_manage_cluster(callback_query: types.CallbackQuery, state: FSMContext):
    cluster_name = callback_query.data.split("|")[1]

    servers = await get_servers_from_db()
    cluster_servers = servers.get(cluster_name, [])

    builder = InlineKeyboardBuilder()

    for server in cluster_servers:
        builder.row(
            InlineKeyboardButton(
                text=f"üåç {server['server_name']}",
                callback_data=f"manage_server|{server['server_name']}",
            )
        )

    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data=f"add_server|{cluster_name}"))

    builder.row(
        InlineKeyboardButton(
            text="üåê –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤",
            callback_data=f"server_availability|{cluster_name}",
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –∫–ª–∞—Å—Ç–µ—Ä–∞",
            callback_data=f"backup_cluster|{cluster_name}",
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=f"sync_cluster|{cluster_name}",
        )
    )

    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏", callback_data="servers_editor"))

    await callback_query.message.answer(
        f"üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data.startswith("sync_cluster|"), IsAdminFilter())
async def sync_cluster_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞."""
    cluster_name = callback_query.data.split("|")[1]

    conn = await asyncpg.connect(DATABASE_URL)
    try:
        query_keys = """
            SELECT tg_id, client_id, email, expiry_time
            FROM keys
            WHERE server_id = $1
        """
        keys_to_sync = await conn.fetch(query_keys, cluster_name)

        if not keys_to_sync:
            await callback_query.message.answer(
                f"‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}.",
                reply_markup=InlineKeyboardBuilder()
                .row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="servers_editor"))
                .as_markup(),
            )
            return

        servers = await get_servers_from_db()
        cluster_servers = servers.get(cluster_name, [])

        for key in keys_to_sync:
            for server_info in cluster_servers:
                try:
                    await create_key_on_cluster(
                        cluster_name,
                        key["tg_id"],
                        key["client_id"],
                        key["email"],
                        key["expiry_time"],
                    )
                    await asyncio.sleep(0.6)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key['client_id']} –≤ –∫–ª–∞—Å—Ç–µ—Ä {cluster_name}: {e}")

        await callback_query.message.answer(
            f"‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}.",
            reply_markup=InlineKeyboardBuilder()
            .row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="servers_editor"))
            .as_markup(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}: {e}")
        await callback_query.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}",
            reply_markup=InlineKeyboardBuilder()
            .row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="servers_editor"))
            .as_markup(),
        )
    finally:
        await conn.close()


@router.callback_query(F.data.startswith("server_availability|"), IsAdminFilter())
async def handle_check_server_availability(callback_query: types.CallbackQuery):
    cluster_name = callback_query.data.split("|")[1]

    servers = await get_servers_from_db()
    cluster_servers = servers.get(cluster_name, [])

    if not cluster_servers:
        await callback_query.answer(f"–ö–ª–∞—Å—Ç–µ—Ä '{cluster_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤.")
        return

    in_progress_message = await callback_query.message.answer(
        f"üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}.\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    availability_message = f"üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n"

    for server in cluster_servers:
        xui = AsyncApi(server["api_url"], username=ADMIN_USERNAME, password=ADMIN_PASSWORD)

        try:
            await xui.login()

            online_users = len(await xui.client.online())
            availability_message += f"üåç {server['server_name']}: {online_users} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"

        except Exception as e:
            availability_message += f"‚ùå {server['server_name']}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –û—à–∏–±–∫–∞: {e}\n"

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"manage_cluster|{cluster_name}"))

    await in_progress_message.edit_text(availability_message, reply_markup=builder.as_markup())

    await callback_query.answer()


@router.callback_query(F.data.startswith("manage_server|"), IsAdminFilter())
async def handle_manage_server(callback_query: types.CallbackQuery, state: FSMContext):
    server_name = callback_query.data.split("|")[1]

    servers = await get_servers_from_db()

    server = None
    cluster_name = None
    for cluster, cluster_servers in servers.items():
        server = next((s for s in cluster_servers if s["server_name"] == server_name), None)
        if server:
            cluster_name = cluster
            break

    if server:
        api_url = server["api_url"]
        subscription_url = server["subscription_url"]
        inbound_id = server["inbound_id"]

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_server|{server_name}"))
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"manage_cluster|{cluster_name}"))

        await callback_query.message.answer(
            f"<b>üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {server_name}:</b>\n\n"
            f"<b>üì° API URL:</b> {api_url}\n"
            f"<b>üåê Subscription URL:</b> {subscription_url}\n"
            f"<b>üîë Inbound ID:</b> {inbound_id}",
            reply_markup=builder.as_markup(),
        )
    else:
        await callback_query.message.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(F.data.startswith("delete_server|"), IsAdminFilter())
async def handle_delete_server(callback_query: types.CallbackQuery, state: FSMContext):
    server_name = callback_query.data.split("|")[1]

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_server|{server_name}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"manage_server|{server_name}"),
    )

    await callback_query.message.answer(
        f"üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä {server_name}?",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data.startswith("confirm_delete_server|"), IsAdminFilter())
async def handle_confirm_delete_server(callback_query: types.CallbackQuery, state: FSMContext):
    server_name = callback_query.data.split("|")[1]

    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        """
        DELETE FROM servers WHERE server_name = $1
        """,
        server_name,
    )
    await conn.close()

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏", callback_data="servers_editor"))

    await callback_query.message.answer(f"üóëÔ∏è –°–µ—Ä–≤–µ—Ä {server_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("add_server|"), IsAdminFilter())
async def handle_add_server(callback_query: types.CallbackQuery, state: FSMContext):
    cluster_name = callback_query.data.split("|")[1]

    await state.update_data(cluster_name=cluster_name)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="servers_editor"))

    await callback_query.message.answer(
        f"<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}:</b>\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∏–º–µ–Ω–∏.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>server-asia</code>, <code>server-europe</code>",
        reply_markup=builder.as_markup(),
    )

    await state.set_state(UserEditorState.waiting_for_server_name)


@router.callback_query(F.data.startswith("backup_cluster|"), IsAdminFilter())
async def handle_backup_cluster(callback_query: types.CallbackQuery):
    cluster_name = callback_query.data.split("|")[1]

    servers = await get_servers_from_db()
    cluster_servers = servers.get(cluster_name, [])

    for server in cluster_servers:
        xui = AsyncApi(
            server["api_url"],
            username=ADMIN_USERNAME,
            password=ADMIN_PASSWORD,
        )
        await create_backup_and_send_to_admins(xui)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="servers_editor"))

    await callback_query.message.answer(
        f"<b>–ë—ç–∫–∞–ø –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!</b>\n\n"
        f"üîî <i>–ë—ç–∫–∞–ø—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç—ã –ø–∞–Ω–µ–ª–µ–π.</i>",
        reply_markup=builder.as_markup(),
    )
    await callback_query.answer()
