import asyncio
from datetime import datetime
from typing import Any

from aiogram import Bot, F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import TOTAL_GB
from database import delete_user_data, get_client_id_by_email, get_servers_from_db, restore_trial, update_key_expiry
from filters.admin import IsAdminFilter
from handlers.keys.key_utils import (
    delete_key_from_cluster,
    delete_key_from_db,
    renew_key_in_cluster,
)
from handlers.utils import sanitize_key_name
from logger import logger

router = Router()


class UserEditorState(StatesGroup):
    waiting_for_tg_id = State()
    waiting_for_username = State()
    displaying_user_info = State()
    waiting_for_new_balance = State()
    waiting_for_key_name = State()
    waiting_for_expiry_time = State()
    waiting_for_message_text = State()


@router.callback_query(F.data == "search_by_tg_id", IsAdminFilter())
async def prompt_tg_id(callback_query: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
    await callback_query.message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ Telegram ID –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=builder.as_markup()
    )
    await state.set_state(UserEditorState.waiting_for_tg_id)


@router.callback_query(F.data == "search_by_username", IsAdminFilter())
async def prompt_username(callback_query: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
    await callback_query.message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ Username –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=builder.as_markup()
    )
    await state.set_state(UserEditorState.waiting_for_username)


@router.message(UserEditorState.waiting_for_username, IsAdminFilter())
async def handle_username_input(
    message: types.Message, state: FSMContext, session: Any
):
    # Extract the username from a message text by removing leading '@' and the Telegram URL prefix
    username = message.text.strip().lstrip('@').replace('https://t.me/', '')
    user_record = await session.fetchrow(
        "SELECT tg_id FROM users WHERE username = $1", username
    )

    if not user_record:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
        await message.answer(
            "üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º username –Ω–µ –Ω–∞–π–¥–µ–Ω. üö´",
            reply_markup=builder.as_markup(),
        )
        await state.clear()
        return

    tg_id = user_record["tg_id"]
    username = await session.fetchval(
        "SELECT username FROM users WHERE tg_id = $1", tg_id
    )
    balance = await session.fetchval(
        "SELECT balance FROM connections WHERE tg_id = $1", tg_id
    )
    key_records = await session.fetch("SELECT email FROM keys WHERE tg_id = $1", tg_id)
    referral_count = await session.fetchval(
        "SELECT COUNT(*) FROM referrals WHERE referrer_tg_id = $1", tg_id
    )

    if balance is None:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
        await message.answer(
            "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º tg_id –Ω–µ –Ω–∞–π–¥–µ–Ω. üîç",
            reply_markup=builder.as_markup(),
        )
        await state.clear()
        return

    builder = InlineKeyboardBuilder()

    for (email,) in key_records:
        builder.row(
            InlineKeyboardButton(text=f"üîë {email}", callback_data=f"edit_key_{email}")
        )

    builder.row(
        InlineKeyboardButton(
            text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
            callback_data=f"change_balance_{tg_id}",
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–Ω–∏–∫",
            callback_data=f"restore_trial_{tg_id}",
        )
    )
    builder.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"confirm_delete_user_{tg_id}"))
    builder.row(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"user_info|{tg_id}"))
    builder.row(
        InlineKeyboardButton(
            text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            callback_data=f"send_message_{tg_id}"
        )
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))

    user_info = (
        f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{tg_id}</b>\n"
        f"üë§ –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>@{username}</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}</b>\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{referral_count}</b>\n"
        f"üîë –ö–ª—é—á–∏ (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á):"
    )
    await message.answer(user_info, reply_markup=builder.as_markup())
    await state.set_state(UserEditorState.displaying_user_info)


@router.callback_query(F.data.startswith("send_message_"))
async def handle_send_message(callback_query: types.CallbackQuery, state: FSMContext):
    tg_id = callback_query.data.split("_")[2]
    await state.update_data(target_tg_id=tg_id)
    await callback_query.message.answer(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
    )
    await state.set_state(UserEditorState.waiting_for_message_text)


@router.message(UserEditorState.waiting_for_message_text, IsAdminFilter())
async def process_send_message(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    target_tg_id = data.get("target_tg_id")

    if not target_tg_id:
        await message.answer("üö´ –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    try:
        await bot.send_message(chat_id=target_tg_id, text=message.text)
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await state.clear()


@router.message(UserEditorState.waiting_for_tg_id, F.text.isdigit(), IsAdminFilter())
async def handle_tg_id_input(message: types.Message, state: FSMContext, session: Any):
    tg_id = int(message.text)
    username = await session.fetchval(
        "SELECT username FROM users WHERE tg_id = $1", tg_id
    )
    balance = await session.fetchval(
        "SELECT balance FROM connections WHERE tg_id = $1", tg_id
    )
    key_records = await session.fetch("SELECT email FROM keys WHERE tg_id = $1", tg_id)
    referral_count = await session.fetchval(
        "SELECT COUNT(*) FROM referrals WHERE referrer_tg_id = $1", tg_id
    )

    if balance is None:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º tg_id –Ω–µ –Ω–∞–π–¥–µ–Ω. üîç",
            reply_markup=builder.as_markup(),
        )
        await state.clear()
        return

    builder = InlineKeyboardBuilder()

    for (email,) in key_records:
        builder.row(
            InlineKeyboardButton(text=f"üîë {email}", callback_data=f"edit_key_{email}")
        )

    builder.row(
        InlineKeyboardButton(
            text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
            callback_data=f"change_balance_{tg_id}",
        )
    )
    builder.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"confirm_delete_user_{tg_id}"))
    builder.row(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"user_info|{tg_id}"))
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–Ω–∏–∫",
            callback_data=f"restore_trial_{tg_id}",
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            callback_data=f"send_message_{tg_id}"
        )
    )

    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))

    user_info = (
        f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{tg_id}</b>\n"
        f"üë§ –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>@{username}</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}</b>\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{referral_count}</b>\n"
        f"üîë –ö–ª—é—á–∏ (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á):"
    )
    await message.answer(user_info, reply_markup=builder.as_markup())
    await state.set_state(UserEditorState.displaying_user_info)


@router.callback_query(F.data.startswith("restore_trial_"), IsAdminFilter())
async def handle_restore_trial(callback_query: types.CallbackQuery, session: Any):
    tg_id = int(callback_query.data.split("_")[2])

    await restore_trial(tg_id, session)

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin"
        )
    )

    await callback_query.message.answer(
        "‚úÖ –¢—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("change_balance_"), IsAdminFilter())
async def process_balance_change(callback_query: CallbackQuery, state: FSMContext):
    tg_id = int(callback_query.data.split("_")[2])
    await state.update_data(tg_id=tg_id)
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
    await callback_query.message.answer(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞:", reply_markup=builder.as_markup()
    )
    await state.set_state(UserEditorState.waiting_for_new_balance)


@router.message(UserEditorState.waiting_for_new_balance, IsAdminFilter())
async def handle_new_balance_input(
    message: types.Message, state: FSMContext, session: Any
):
    if not message.text.isdigit() or int(message.text) < 0:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.",
            reply_markup=builder.as_markup(),
        )
        return

    new_balance = int(message.text)
    user_data = await state.get_data()
    tg_id = user_data.get("tg_id")

    await session.execute(
        "UPDATE connections SET balance = $1 WHERE tg_id = $2",
        new_balance,
        tg_id,
    )

    response_message = f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{new_balance}</b>."

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            callback_data="admin",
        )
    )
    await message.answer(response_message, reply_markup=builder.as_markup())
    await state.clear()


async def get_key_details(email, session):
    record = await session.fetchrow(
        """
        SELECT k.key, k.expiry_time, k.server_id, c.tg_id, c.balance
        FROM keys k
        JOIN connections c ON k.tg_id = c.tg_id
        WHERE k.email = $1
        """,
        email,
    )

    if not record:
        return None

    servers = await get_servers_from_db()

    cluster_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä"
    for cluster_name, cluster_servers in servers.items():
        if any(
            server["inbound_id"] == record["server_id"] for server in cluster_servers
        ):
            cluster_name = cluster_name
            break

    expiry_date = datetime.utcfromtimestamp(record["expiry_time"] / 1000)
    current_date = datetime.utcnow()
    time_left = expiry_date - current_date

    if time_left.total_seconds() <= 0:
        days_left_message = "<b>–ö–ª—é—á –∏—Å—Ç–µ–∫.</b>"
    elif time_left.days > 0:
        days_left_message = f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{time_left.days}</b>"
    else:
        hours_left = time_left.seconds // 3600
        days_left_message = f"–û—Å—Ç–∞–ª–æ—Å—å —á–∞—Å–æ–≤: <b>{hours_left}</b>"

    return {
        "key": record["key"],
        "expiry_date": expiry_date.strftime("%d %B %Y –≥–æ–¥–∞"),
        "days_left_message": days_left_message,
        "server_name": cluster_name,
        "balance": record["balance"],
        "tg_id": record["tg_id"],
    }


@router.callback_query(F.data.startswith("edit_key_"), IsAdminFilter())
async def process_key_edit(callback_query: CallbackQuery, session: Any):
    email = callback_query.data.split("_", 2)[2]
    key_details = await get_key_details(email, session)

    if not key_details:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
        await callback_query.message.answer(
            "üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b> üö´",
            reply_markup=builder.as_markup(),
        )
        return

    response_message = (
        f"üîë –ö–ª—é—á: <code>{key_details['key']}</code>\n"
        f"‚è∞ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: <b>{key_details['expiry_date']}</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{key_details['balance']}</b>\n"
        f"üåê –ö–ª–∞—Å—Ç–µ—Ä: <b>{key_details['server_name']}</b>"
    )

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–µ",
            callback_data=f"user_info|{key_details['tg_id']}",
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è",
            callback_data=f"change_expiry|{email}",
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á",
            callback_data=f"delete_key_admin|{email}",
        )
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))

    await callback_query.message.answer(
        response_message, reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "search_by_key_name", IsAdminFilter())
async def prompt_key_name(callback_query: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
    await callback_query.message.answer(
        "üîë –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª—é—á–∞:", reply_markup=builder.as_markup()
    )
    await state.set_state(UserEditorState.waiting_for_key_name)


@router.message(UserEditorState.waiting_for_key_name, IsAdminFilter())
async def handle_key_name_input(
    message: types.Message, state: FSMContext, session: Any
):
    key_name = sanitize_key_name(message.text)
    key_details = await get_key_details(key_name, session)

    if not key_details:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
        await message.answer(
            "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=builder.as_markup(),
        )
        await state.clear()
        return

    response_message = (
        f"üîë –ö–ª—é—á: <code>{key_details['key']}</code>\n"
        f"‚è∞ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: <b>{key_details['expiry_date']}</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{key_details['balance']}</b>\n"
        f"üåê –°–µ—Ä–≤–µ—Ä: <b>{key_details['server_name']}</b>"
    )

    key_buttons = InlineKeyboardBuilder()
    key_buttons.row(
        InlineKeyboardButton(
            text="‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–µ",
            callback_data=f"user_info|{key_details['tg_id']}",
        )
    )
    key_buttons.row(
        InlineKeyboardButton(
            text="‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è",
            callback_data=f"change_expiry|{key_name}",
        )
    )
    key_buttons.row(
        InlineKeyboardButton(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á",
            callback_data=f"delete_key_admin|{key_name}",
        )
    )
    key_buttons.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))

    await message.answer(response_message, reply_markup=key_buttons.as_markup())
    await state.clear()


@router.callback_query(F.data.startswith("change_expiry|"), IsAdminFilter())
async def prompt_expiry_change(callback_query: CallbackQuery, state: FSMContext):
    email = callback_query.data.split("|")[1]
    await callback_query.message.answer(
        f"‚è≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–∞ <b>{email}</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>YYYY-MM-DD HH:MM:SS</code>:"
    )
    await state.update_data(email=email)
    await state.set_state(UserEditorState.waiting_for_expiry_time)


@router.message(UserEditorState.waiting_for_expiry_time, IsAdminFilter())
async def handle_expiry_time_input(
    message: types.Message, state: FSMContext, session: Any
):
    user_data = await state.get_data()
    email = user_data.get("email")

    if not email:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
        await message.answer(
            "üìß Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏. üö´", reply_markup=builder.as_markup()
        )
        await state.clear()
        return

    try:
        expiry_time_str = message.text
        expiry_time = int(
            datetime.strptime(expiry_time_str, "%Y-%m-%d %H:%M:%S").timestamp() * 1000
        )

        client_id = await get_client_id_by_email(email)
        if client_id is None:
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor")
            )
            await message.answer(
                f"üö´ –ö–ª–∏–µ–Ω—Ç —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω. üîç",
                reply_markup=builder.as_markup(),
            )
            await state.clear()
            return

        record = await session.fetchrow(
            "SELECT server_id FROM keys WHERE client_id = $1", client_id
        )
        if not record:
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor")
            )
            await message.answer(
                "üö´ –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. üîç",
                reply_markup=builder.as_markup(),
            )
            await state.clear()
            return

        clusters = await get_servers_from_db()

        async def update_key_on_all_servers():
            tasks = []
            for cluster_name, cluster_servers in clusters.items():
                for server in cluster_servers:
                    tasks.append(
                        asyncio.create_task(
                            renew_key_in_cluster(
                                cluster_name,
                                email,
                                client_id,
                                expiry_time,
                                total_gb=TOTAL_GB,
                            )
                        )
                    )
            await asyncio.gather(*tasks)

        await update_key_on_all_servers()

        await update_key_expiry(client_id, expiry_time)

        response_message = f"‚úÖ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} ({email}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö."

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin"))
        await message.answer(response_message, reply_markup=builder.as_markup())
    except ValueError:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM:SS.",
            reply_markup=builder.as_markup(),
        )
    except Exception as e:
        logger.error(e)
    await state.clear()


@router.callback_query(F.data.startswith("delete_key_admin|"), IsAdminFilter())
async def process_callback_delete_key(
    callback_query: types.CallbackQuery, session: Any
):
    email = callback_query.data.split("|")[1]
    client_id = await session.fetchval(
        "SELECT client_id FROM keys WHERE email = $1", email
    )

    if client_id is None:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))
        await callback_query.message.answer(
            "üîç –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. üö´", reply_markup=builder.as_markup()
        )
        return

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
            callback_data=f"confirm_delete_admin|{client_id}",
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="user_editor")
    )
    await callback_query.message.answer(
        "<b>‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á?</b>",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data.startswith("confirm_delete_admin|"), IsAdminFilter())
async def process_callback_confirm_delete(
    callback_query: types.CallbackQuery, session: Any
):
    client_id = callback_query.data.split("|")[1]
    record = await session.fetchrow(
        "SELECT email FROM keys WHERE client_id = $1", client_id
    )

    if record:
        email = record["email"]
        response_message = "‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_keys"))

        clusters = await get_servers_from_db()

        async def delete_key_from_servers(email, client_id):
            tasks = []
            for cluster_name, cluster_servers in clusters.items():
                for server in cluster_servers:
                    tasks.append(
                        delete_key_from_cluster(cluster_name, email, client_id)
                    )
            await asyncio.gather(*tasks)

        await delete_key_from_servers(email, client_id)
        await delete_key_from_db(client_id, session)

        await callback_query.message.answer(
            response_message, reply_markup=builder.as_markup()
        )
    else:
        response_message = "üö´ –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω."
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_keys"))
        await callback_query.message.answer(
            response_message, reply_markup=builder.as_markup()
        )


@router.callback_query(F.data.startswith("user_info|"), IsAdminFilter())
async def handle_user_info(
    callback_query: types.CallbackQuery, state: FSMContext, session: Any
):
    tg_id = int(callback_query.data.split("|")[1])
    username = await session.fetchval(
        "SELECT username FROM users WHERE tg_id = $1", tg_id
    )
    balance = await session.fetchval(
        "SELECT balance FROM connections WHERE tg_id = $1", tg_id
    )
    key_records = await session.fetch("SELECT email FROM keys WHERE tg_id = $1", tg_id)
    referral_count = await session.fetchval(
        "SELECT COUNT(*) FROM referrals WHERE referrer_tg_id = $1", tg_id
    )

    builder = InlineKeyboardBuilder()

    for (email,) in key_records:
        builder.row(
            InlineKeyboardButton(text=f"üîë {email}", callback_data=f"edit_key_{email}")
        )

    builder.row(InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"change_balance_{tg_id}"))
    builder.row(InlineKeyboardButton(text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–Ω–∏–∫", callback_data=f"restore_trial_{tg_id}"))
    builder.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"confirm_delete_user_{tg_id}"))
    builder.row(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"user_info|{tg_id}"))
    builder.row(
        InlineKeyboardButton(
            text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            callback_data=f"send_message_{tg_id}"
        )
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor"))

    user_info = (
        f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{tg_id}</b>\n"
        f"üë§ –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>@{username}</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}</b>\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{referral_count}</b>\n"
        f"üîë –ö–ª—é—á–∏ (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á):"
    )

    await callback_query.message.answer(user_info, reply_markup=builder.as_markup())
    await state.set_state(UserEditorState.displaying_user_info)


@router.callback_query(F.data.startswith("confirm_delete_user_"), IsAdminFilter())
async def confirm_delete_user(callback_query: types.CallbackQuery, state: FSMContext, session: Any):
    tg_id = int(callback_query.data.split("_")[3])

    confirmation_markup = InlineKeyboardMarkup(
        row_width=2,
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"delete_user_{tg_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="user_editor")],
        ],
    )

    await callback_query.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {tg_id}?", reply_markup=confirmation_markup
    )


@router.callback_query(F.data.startswith("delete_user_"), IsAdminFilter())
async def delete_user(callback_query: types.CallbackQuery, session: Any):
    tg_id = int(callback_query.data.split("_")[2])

    key_records = await session.fetch("SELECT email, client_id FROM keys WHERE tg_id = $1", tg_id)

    async def delete_keys_from_servers():
        try:
            tasks = []
            for email, client_id in key_records:
                servers = await get_servers_from_db()
                for cluster_id, cluster in servers.items():
                    tasks.append(delete_key_from_cluster(cluster_id, email, client_id))
            await asyncio.gather(*tasks)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–π —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e}")

    await delete_keys_from_servers()

    try:
        await delete_user_data(session, tg_id)

        back_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="user_editor")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[back_button]])

        await callback_query.message.answer(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {tg_id} –±—ã–ª —É–¥–∞–ª–µ–Ω.", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e}")
        await callback_query.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {tg_id}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
