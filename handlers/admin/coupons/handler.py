from typing import Any

from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
    Message,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import INLINE_MODE, USERNAME_BOT
from database import create_coupon, delete_coupon, get_all_coupons
from filters.admin import IsAdminFilter
from handlers.buttons import BACK
from handlers.utils import format_days
from logger import logger

from ..panel.keyboard import AdminPanelCallback, build_admin_back_kb
from .keyboard import (
    AdminCouponDeleteCallback,
    build_coupons_kb,
    build_coupons_list_kb,
    format_coupons_list,
)


router = Router()


class AdminCouponsState(StatesGroup):
    waiting_for_coupon_type = State()
    waiting_for_balance_data = State()
    waiting_for_days_data = State()


@router.callback_query(
    AdminPanelCallback.filter(F.action == "coupons"),
    IsAdminFilter(),
)
async def handle_coupons(callback_query: CallbackQuery):
    await callback_query.message.edit_text(text="üõ† –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞–º–∏:", reply_markup=build_coupons_kb())


@router.callback_query(
    AdminPanelCallback.filter(F.action == "coupons_create"),
    IsAdminFilter(),
)
async def handle_coupons_create(callback_query: CallbackQuery, state: FSMContext):
    text = "üé´ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É–ø–æ–Ω–∞:</b>"
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="coupon_type_balance")
    kb.button(text="‚è≥ –í—Ä–µ–º—è", callback_data="coupon_type_days")
    kb.button(text=BACK, callback_data=AdminPanelCallback(action="coupons").pack())
    kb.adjust(1)

    await callback_query.message.edit_text(text=text, reply_markup=kb.as_markup())
    await state.set_state(AdminCouponsState.waiting_for_coupon_type)


@router.callback_query(F.data == "coupon_type_balance")
async def handle_balance_coupon_selection(callback_query: CallbackQuery, state: FSMContext):
    text = (
        "üé´ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n\n"
        "üìù <i>–∫–æ–¥</i> üí∞ <i>—Å—É–º–º–∞</i> üî¢ <i>–ª–∏–º–∏—Ç</i>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <b>'COUPON1 50 5'</b> üëà\n\n"
    )
    kb = InlineKeyboardBuilder()
    kb.button(text=BACK, callback_data=AdminPanelCallback(action="coupons").pack())

    await callback_query.message.edit_text(text=text, reply_markup=kb.as_markup())
    await state.set_state(AdminCouponsState.waiting_for_balance_data)


@router.callback_query(F.data == "coupon_type_days")
async def handle_days_coupon_selection(callback_query: CallbackQuery, state: FSMContext):
    text = (
        "üé´ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n\n"
        "üìù <i>–∫–æ–¥</i> ‚è≥ <i>–¥–Ω–∏</i> üî¢ <i>–ª–∏–º–∏—Ç</i>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <b>'DAYS10 10 50'</b> üëà\n\n"
    )
    kb = InlineKeyboardBuilder()
    kb.button(text=BACK, callback_data=AdminPanelCallback(action="coupons").pack())

    await callback_query.message.edit_text(text=text, reply_markup=kb.as_markup())
    await state.set_state(AdminCouponsState.waiting_for_days_data)


@router.message(AdminCouponsState.waiting_for_balance_data, IsAdminFilter())
async def handle_balance_coupon_input(message: Message, state: FSMContext, session: Any):
    text = message.text.strip()
    parts = text.split()

    kb = InlineKeyboardBuilder()
    kb.button(text=BACK, callback_data=AdminPanelCallback(action="coupons").pack())

    if len(parts) != 3:
        text = (
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b> üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "üè∑Ô∏è <b>–∫–æ–¥</b> üí∞ <b>—Å—É–º–º–∞</b> üî¢ <b>–ª–∏–º–∏—Ç</b>\n"
            "–ü—Ä–∏–º–µ—Ä: <b>'COUPON1 50 5'</b> üëà"
        )
        await message.answer(text=text, reply_markup=kb.as_markup())
        return

    try:
        coupon_code = parts[0]
        coupon_amount = int(parts[1])
        usage_limit = int(parts[2])
        if coupon_amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    except ValueError:
        text = "‚ö†Ô∏è <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!</b>\nüí± –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ –ª–∏–º–∏—Ç ‚Äî —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."
        await message.answer(text=text, reply_markup=kb.as_markup())
        return

    try:
        await create_coupon(session, coupon_code, coupon_amount, usage_limit, days=None)

        coupon_link = f"https://t.me/{USERNAME_BOT}?start=coupons_{coupon_code}"
        text = (
            f"‚úÖ –ö—É–ø–æ–Ω —Å –∫–æ–¥–æ–º <b>{coupon_code}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"üí∞ –°—É–º–º–∞: <b>{coupon_amount} —Ä—É–±–ª–µ–π</b>\n"
            f"üî¢ –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: <b>{usage_limit} —Ä–∞–∑</b>\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <code>{coupon_link}</code>\n"
        )

        kb = InlineKeyboardBuilder()
        if INLINE_MODE:
            kb.button(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=f"coupon_{coupon_code}")
        kb.button(text=BACK, callback_data=AdminPanelCallback(action="coupons").pack())
        kb.adjust(1)

        await message.answer(text=text, reply_markup=kb.as_markup())
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞.", reply_markup=kb.as_markup())


@router.message(AdminCouponsState.waiting_for_days_data, IsAdminFilter())
async def handle_days_coupon_input(message: Message, state: FSMContext, session: Any):
    text = message.text.strip()
    parts = text.split()

    kb = InlineKeyboardBuilder()
    kb.button(text=BACK, callback_data=AdminPanelCallback(action="coupons").pack())

    if len(parts) != 3:
        text = (
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b> üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "üè∑Ô∏è <b>–∫–æ–¥</b> ‚è≥ <i>–¥–Ω–∏</i> üî¢ <b>–ª–∏–º–∏—Ç</b>\n"
            "–ü—Ä–∏–º–µ—Ä: <b>'DAYS10 10 50'</b> üëà"
        )
        await message.answer(text=text, reply_markup=kb.as_markup())
        return

    try:
        coupon_code = parts[0]
        days = int(parts[1])
        usage_limit = int(parts[2])
        if days <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    except ValueError:
        text = "‚ö†Ô∏è <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!</b>\nüí± –î–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ –ª–∏–º–∏—Ç ‚Äî —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."
        await message.answer(text=text, reply_markup=kb.as_markup())
        return

    try:
        await create_coupon(session, coupon_code, 0, usage_limit, days=days)

        coupon_link = f"https://t.me/{USERNAME_BOT}?start=coupons_{coupon_code}"
        text = (
            f"‚úÖ –ö—É–ø–æ–Ω —Å –∫–æ–¥–æ–º <b>{coupon_code}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"‚è≥ <b>{format_days(days)}</b>\n"
            f"üî¢ –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: <b>{usage_limit} —Ä–∞–∑</b>\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <code>{coupon_link}</code>\n"
        )

        kb = InlineKeyboardBuilder()
        if INLINE_MODE:
            kb.button(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=f"coupon_{coupon_code}")
        kb.button(text=BACK, callback_data=AdminPanelCallback(action="coupons").pack())
        kb.adjust(1)

        await message.answer(text=text, reply_markup=kb.as_markup())
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞.", reply_markup=kb.as_markup())


@router.callback_query(
    AdminPanelCallback.filter(F.action == "coupons_list"),
    IsAdminFilter(),
)
async def handle_coupons_list(callback_query: CallbackQuery, session: Any):
    try:
        data = AdminPanelCallback.unpack(callback_query.data)
        page = data.page if data.page is not None else 1
        await update_coupons_list(callback_query.message, session, page)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É–ø–æ–Ω–æ–≤: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É–ø–æ–Ω–æ–≤.")


@router.callback_query(AdminCouponDeleteCallback.filter(F.confirm.is_(None)), IsAdminFilter())
async def handle_coupon_delete(
    callback_query: CallbackQuery,
    callback_data: AdminCouponDeleteCallback,
    session: Any,
):
    coupon_code = callback_data.coupon_code
    kb = InlineKeyboardBuilder()
    kb.button(
        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
        callback_data=AdminCouponDeleteCallback(coupon_code=coupon_code, confirm=True).pack(),
    )
    kb.button(
        text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å",
        callback_data=AdminCouponDeleteCallback(coupon_code=coupon_code, confirm=False).pack(),
    )
    kb.adjust(1)

    await callback_query.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫—É–ø–æ–Ω <b>{coupon_code}</b>?",
        reply_markup=kb.as_markup(),
    )


@router.callback_query(AdminCouponDeleteCallback.filter(F.confirm.is_not(None)), IsAdminFilter())
async def confirm_coupon_delete(
    callback_query: CallbackQuery,
    callback_data: AdminCouponDeleteCallback,
    session: Any,
):
    coupon_code = callback_data.coupon_code
    confirm = callback_data.confirm

    if confirm:
        try:
            result = await delete_coupon(session, coupon_code)
            if not result:
                await callback_query.message.edit_text(
                    f"‚ùå –ö—É–ø–æ–Ω —Å –∫–æ–¥–æ–º {coupon_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=build_admin_back_kb("coupons"),
                )
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–∞: {e}")
            await callback_query.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–∞.",
                reply_markup=build_admin_back_kb("coupons"),
            )
            return

    await update_coupons_list(callback_query.message, session)


async def update_coupons_list(message, session: Any, page: int = 1):
    per_page = 10
    result = await get_all_coupons(session, page, per_page)
    coupons = result["coupons"]

    if not coupons:
        await message.edit_text(
            text="‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤!",
            reply_markup=build_admin_back_kb("coupons"),
        )
        return

    kb = build_coupons_list_kb(coupons, result["current_page"], result["pages"])
    text = format_coupons_list(coupons, USERNAME_BOT)
    await message.edit_text(text=text, reply_markup=kb)


@router.inline_query(F.query.startswith("coupon_"))
async def inline_coupon_handler(inline_query: InlineQuery, session: Any):
    if not INLINE_MODE:
        return

    coupon_code = inline_query.query.split("coupon_")[1]
    coupon_link = f"https://t.me/{USERNAME_BOT}?start=coupons_{coupon_code}"

    coupons = await get_all_coupons(session, page=1, per_page=10)
    coupon = next((c for c in coupons["coupons"] if c["code"] == coupon_code), None)

    if not coupon:
        await inline_query.answer(
            results=[],
            switch_pm_text="–ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω",
            switch_pm_parameter="coupons",
            cache_time=1,
        )
        return

    title = f"–ö—É–ø–æ–Ω {coupon['code']}"
    description = (
        f"–ü–æ–ª—É—á–∏ {coupon['amount']} —Ä—É–±–ª–µ–π!"
        if coupon["amount"] > 0
        else f"–ü—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {format_days(coupon['days'])}!"
    )
    message_text = (
        f"üé´ <b>–ö—É–ø–æ–Ω:</b> {coupon['code']}\n"
        f"{'üí∞ <b>–ë–æ–Ω—É—Å:</b> ' + str(coupon['amount']) + ' —Ä—É–±–ª–µ–π' if coupon['amount'] > 0 else '‚è≥ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> ' + format_days(coupon['days'])}\n"
        f"üëá –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å!"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω", url=coupon_link)

    result = InlineQueryResultArticle(
        id=coupon_code,
        title=title,
        description=description,
        input_message_content=InputTextMessageContent(message_text=message_text, parse_mode=ParseMode.HTML),
        reply_markup=builder.as_markup(),
    )

    await inline_query.answer(results=[result], cache_time=86400, is_personal=True)
