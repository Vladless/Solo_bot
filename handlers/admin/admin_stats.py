from datetime import datetime
from io import BytesIO
from typing import Any

from aiogram import F, Router
from aiogram.types import CallbackQuery, BufferedInputFile

from filters.admin import IsAdminFilter
from keyboards.admin.panel_kb import AdminPanelCallback, build_admin_back_kb
from keyboards.admin.stats_kb import build_stats_kb
from logger import logger
from utils.csv_export import export_payments_csv, export_users_csv

router = Router()


@router.callback_query(
    AdminPanelCallback.filter(F.action == "stats"),
    IsAdminFilter(),
)
async def handle_stats(
        callback_query: CallbackQuery,
        session: Any
):
    try:
        total_users = await session.fetchval("SELECT COUNT(*) FROM users")
        total_keys = await session.fetchval("SELECT COUNT(*) FROM keys")
        total_referrals = await session.fetchval("SELECT COUNT(*) FROM referrals")

        total_payments_today = await session.fetchval(
            "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE created_at >= CURRENT_DATE"
        )
        total_payments_week = await session.fetchval(
            "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE created_at >= date_trunc('week', CURRENT_DATE)"
        )
        total_payments_month = await session.fetchval(
            "SELECT COALESCE(SUM(amount), 0) FROM payments WHERE created_at >= date_trunc('month', CURRENT_DATE)"
        )
        total_payments_all_time = await session.fetchval(
            "SELECT COALESCE(SUM(amount), 0) FROM payments"
        )

        registrations_today = await session.fetchval(
            "SELECT COUNT(*) FROM users WHERE created_at >= CURRENT_DATE"
        )
        registrations_week = await session.fetchval(
            "SELECT COUNT(*) FROM users WHERE created_at >= date_trunc('week', CURRENT_DATE)"
        )
        registrations_month = await session.fetchval(
            "SELECT COUNT(*) FROM users WHERE created_at >= date_trunc('month', CURRENT_DATE)"
        )

        users_updated_today = await session.fetchval(
            "SELECT COUNT(*) FROM users WHERE updated_at >= CURRENT_DATE"
        )

        active_keys = await session.fetchval(
            "SELECT COUNT(*) FROM keys WHERE expiry_time > $1",
            int(datetime.utcnow().timestamp() * 1000),
        )
        expired_keys = total_keys - active_keys

        stats_message = (
            f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            f"   üìÖ –ó–∞ –¥–µ–Ω—å: <b>{registrations_today}</b>\n"
            f"   üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é: <b>{registrations_week}</b>\n"
            f"   üìÜ –ó–∞ –º–µ—Å—è—Ü: <b>{registrations_month}</b>\n"
            f"   üåê –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{total_users}</b>\n\n"
            f"üåü –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            f"   üåü –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <b>{users_updated_today}</b>\n\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã:\n"
            f"   ü§ù –í—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–æ: <b>{total_referrals}</b>\n\n"
            f"üîë –ö–ª—é—á–∏:\n"
            f"   üåà –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: <b>{total_keys}</b>\n"
            f"   ‚úÖ –î–µ–π—Å—Ç–≤—É—é—â–∏—Ö: <b>{active_keys}</b>\n"
            f"   ‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: <b>{expired_keys}</b>\n\n"
            f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"   üìÖ –ó–∞ –¥–µ–Ω—å: <b>{total_payments_today} ‚ÇΩ</b>\n"
            f"   üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é: <b>{total_payments_week} ‚ÇΩ</b>\n"
            f"   üìÜ –ó–∞ –º–µ—Å—è—Ü: <b>{total_payments_month} ‚ÇΩ</b>\n"
            f"   üè¶ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{total_payments_all_time} ‚ÇΩ</b>\n"
        )

        await callback_query.message.edit_text(
            text=stats_message,
            reply_markup=build_stats_kb()
        )
    except Exception as e:
        logger.error(f"Error in user_stats_menu: {e}")


@router.callback_query(
    AdminPanelCallback.filter(F.action == "stats_export_users_csv"),
    IsAdminFilter(),
)
async def handle_export_users_csv(
        callback_query: CallbackQuery,
        session: Any
):
    kb = build_admin_back_kb("stats")

    try:
        export = await export_users_csv(session)
        await callback_query.message.answer_document(
            document=export,
            caption="üì• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV: {e}")
        await callback_query.message.edit_text(
            text=f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}",
            reply_markup=kb
        )


@router.callback_query(
    AdminPanelCallback.filter(F.action == "stats_export_payments_csv"),
    IsAdminFilter(),
)
async def handle_export_payments_csv(
        callback_query: CallbackQuery,
        session: Any
):
    kb = build_admin_back_kb("stats")

    try:
        export = await export_payments_csv(session)
        await callback_query.message.answer_document(
            document=export,
            caption="üì• –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π –≤ CSV"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–ª–∞—Ç–µ–∂–µ–π –≤ CSV: {e}")
        await callback_query.message.edit_text(
            text=f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}",
            reply_markup=kb
        )
