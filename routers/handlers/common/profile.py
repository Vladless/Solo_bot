import os

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import NEWS_MESSAGE, RENEWAL_PLANS
from database import get_balance, get_key_count, get_referral_stats
from routers.handlers import get_referral_link, invite_message_send, profile_message_send

router = Router(name=__name__)


@router.callback_query(F.data == "profile")
async def process_callback_view_profile(callback_query: types.CallbackQuery, state: FSMContext, admin: bool):
    chat_id = callback_query.message.chat.id
    username = callback_query.from_user.full_name
    image_path = os.path.join("img", "pic.jpg")
    key_count = await get_key_count(chat_id)
    balance = await get_balance(chat_id)
    if balance is None:
        balance = 0

    profile_message = profile_message_send(username, chat_id, balance, key_count)

    if key_count == 0:
        profile_message += "\n<pre>üîß <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ûï –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</i></pre>"
    else:
        profile_message += f"\n<pre>üîß <i>{NEWS_MESSAGE}</i></pre>"

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="create_key"),
        InlineKeyboardButton(text="üì± –ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="view_keys"),
    )
    builder.row(
        InlineKeyboardButton(
            text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
            callback_data="pay",
        )
    )
    builder.row(
        InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite"),
        InlineKeyboardButton(text="üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="instructions"),
    )
    builder.row(InlineKeyboardButton(text="üí° –¢–∞—Ä–∏—Ñ—ã", callback_data="view_tariffs"))
    if admin:
        builder.row(InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))

    if os.path.isfile(image_path):
        with open(image_path, "rb") as image_file:
            await callback_query.message.answer_photo(
                photo=BufferedInputFile(image_file.read(), filename="pic.jpg"),
                caption=profile_message,
                reply_markup=builder.as_markup(),
            )
    else:
        await callback_query.message.answer(
            text=profile_message,
            reply_markup=builder.as_markup(),
        )


@router.callback_query(F.data == "view_tariffs")
async def view_tariffs_handler(callback_query: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

    await callback_query.message.answer(
        "<b>üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã VPN:</b>\n\n"
        + "\n".join(
            [
                f"{months} {'–º–µ—Å—è—Ü' if months == '1' else '–º–µ—Å—è—Ü–∞' if int(months) in [2, 3, 4] else '–º–µ—Å—è—Ü–µ–≤'}: "
                f"{RENEWAL_PLANS[months]['price']} "
                f"{'üí≥' if months == '1' else 'üåü' if months == '3' else 'üî•' if months == '6' else 'üöÄ'} —Ä—É–±–ª–µ–π"
                for months in sorted(RENEWAL_PLANS.keys(), key=int)
            ]
        ),
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data == "invite")
async def invite_handler(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    referral_link = get_referral_link(chat_id)

    referral_stats = await get_referral_stats(chat_id)

    invite_message = invite_message_send(referral_link, referral_stats)

    image_path = os.path.join("img", "pic_invite.jpg")

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))
    if os.path.isfile(image_path):
        with open(image_path, "rb") as image_file:
            await callback_query.message.answer_photo(
                photo=BufferedInputFile(image_file.read(), filename="pic_invite.jpg"),
                caption=invite_message,
                reply_markup=builder.as_markup(),
            )
    else:
        await callback_query.message.answer(
            text=invite_message,
            reply_markup=builder.as_markup(),
        )
